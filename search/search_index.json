{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Selamat Datang","text":""},{"location":"#belajar-php-dasar","title":"Belajar PHP Dasar","text":"<p>Mulai Belajar </p> <p>Beliin Kopi  </p>"},{"location":"01/","title":"Mengenal PHP","text":""},{"location":"01/#pengertian-dan-aplikasi-yang-diperlukan","title":"Pengertian dan Aplikasi yang Diperlukan","text":"<ul> <li>PHP merupakan singkatan dari PHP Hypertext Preprocessor, yaitu bahasa pemrograman web yang dapat disisipkan dalam skrip HTML dan bekerja di sisi server.</li> <li>Tujuannya adalah untuk membantu para developer dalam membuat web dinamis dengan cepat.</li> <li>Agar dapat menjalankan PHP, kita perlu menyediakan perangkat lunak berikut:<ul> <li>Web Server (Apache, IIS, Nginx),</li> <li>PHP Server,</li> <li>Database Server (MySQL, MariaDB, MongoDB, dsb)</li> </ul> </li> <li>Aplikasi di atas tidak perlu diinstall satu per satu, karena biasanya telah tersedia paket aplikasi yang sudah mencakup semuanya, seperti XAMPP, Laragon, AppServ, USBWebserver, Uwamp, dsb.</li> <li>Jika menggunakan XAMPP, maka skrip PHP ditulis di dalam folder htdocs, namun jika menggunakan Appserv ataupun laragon, maka skrip PHP disimpan di dalam folder www.</li> </ul>"},{"location":"01/#fungsi-php","title":"Fungsi PHP","text":"<p>Fungsi PHP dalam pemrograman web di antaranya sebagai berikut:</p> <ul> <li>Menghasilkan halaman dinamis pada website.</li> <li>Membuat, membuka, menulis, membaca, menghapus dan menutup file pada server.</li> <li>Memproses data yang dikirim dari form.</li> <li>Mengirim dan mengakses cookie.</li> <li>Modifikasi data pada database.</li> <li>Mengontrol akses user.</li> <li>Mengenkripsi data.</li> </ul>"},{"location":"01/#penulisan-sintaks-php","title":"Penulisan Sintaks PHP","text":"<ul> <li>Skrip PHP dituliskan di antara tanda pembuka <code>&lt;?php</code> dan penutup <code>?&gt;</code>.</li> <li>Satu file PHP dapat berisi full skrip PHP atau dapat disisipkan di antara skrip lain seperti HTML, CSS maupun Javascript.</li> <li>File yang berisi skrip PHP wajib disimpan dengan ekstensi .php.</li> <li>Jika disimpan dengan ekstensi HTML ataupun di sembarang tempat, maka skrip PHP tidak akan diakses sebagaimana mestinya.</li> <li>Setiap baris skrip PHP harus diakhiri dengan tanda semicolon <code>;</code>, jika tidak, maka akan menampilkan pesan error</li> </ul> <p>Contoh penulisan skrip PHP <pre><code>&lt;?php\necho \"Halo Kamu\";\n?&gt;\n</code></pre></p>"},{"location":"01/#menjalankan-file-php","title":"Menjalankan File PHP","text":"<p>Menjalankan skrip PHP tidak sama seperti membuka file HTML yang tinggal didobel klik terbuka begitu saja. Setidaknya ada 3 cara yang bisa dilakukan untuk menjalankan skrip PHP.</p> <ol> <li> <p>Dengan Command Prompt</p> <p>Yaitu dengan memanggil file php dari aplikasi terminal ataupun command prompt. Contohnya, jika saya punya file <code>halo.php</code> saya bisa mengetikkan <code>php halo.php</code> pada command promt, maka skrip akan dijalankan dan hasilnya langsung muncul di command promt. Ini cocok jika digunakan untuk sekedar belajar ataupun membuat aplikasi php berbasis comamnd line.</p> </li> <li> <p>Dengan Web Server</p> <p>Yaitu dengan menginstall paket aplikasi XAMPP, Laragon, Appserv atau yang lainnya, lalu menyimpan file php pada direktori servernya, semisal pada folder htdocs ataupun www.</p> </li> <li> <p>Dengan PHP Server</p> <p>Ini adalah opsi yang ringan, alih-alih menginstall aplikasi XAMPP dan semacamnya yang ukurannya besar, kita cukup memanfaatkan file binary PHP. karena PHP sendiri sebenarnya bisa menjalankan web server.</p> <p>Ini cocok dilakukan jika kita ingin menampilkan pemrosesan skrip PHP pada web browser namun belum berhubungan dengan databse.</p> <p>Namun jika suatu saat kita harus melakukan manipulasi database, kita perlu menginstall aplikasi database server semacam MariaDB ataupun MySQL secara terpisah.</p> <p>Cara menjalankan PHP Web Server adalah dengan membuka command prompt, lalu ketikkan perintah</p> </li> </ol> <pre><code>php -S localhost:80\n</code></pre> <p>atau semisal saya menyimpan file skrip php di dalam folder <code>web</code> maka perintahnya adalah</p> <pre><code>php -S localhost:80 -t web\n</code></pre>"},{"location":"01/#skrip-html-dan-php","title":"Skrip HTML dan PHP","text":"<ul> <li>Untuk menampilkan skrip HTML ke browser, kita bisa menggunakan perintah <code>print</code> atau <code>echo</code>, namun yang lebih sering digunakan adalah <code>echo</code></li> <li>Perintah <code>echo</code> bisa ditulis tanpa kurung, atau dengan kurung seperti ini <code>echo()</code></li> <li>Teks yang ingin ditampilkan, baik berupa skrip HTML maupun teks biasa harus diapit dengan tanda single-quote <code>'</code> ataupun double-qoute <code>\"</code>.</li> </ul> <p>Warning</p> <ul> <li>Jangan menuliskan petik ganda <code>\"</code> di dalam teks, jika menggunakan perintah <code>echo</code> atau <code>print</code> dengan petik ganda, begitu juga dengan petik tunggak <code>'</code>.</li> <li>Jika terpaksa harus menuliskan petik, maka berikan tanda back slash <code>\\</code> sebagai escape-character sebelum tanda petik.</li> <li>Segabai tanda petik ganda, dapat menggunakan petik tunggal <code>'</code>, jika menggunakan <code>echo</code> atau <code>print</code> dengan petik ganda, begitu juga sebaliknya.</li> </ul> <p>Mari kita buat contoh skrip dengan perintah <code>echo</code></p> <pre><code>&lt;?php\necho \"&lt;h2&gt;PHP itu mudah&lt;/h2&gt;\";\necho (\"Saya senang belajar \\\"PHP\\\" &lt;br&gt;\");\n\nprint 'Jika saya terus belajar,';\nprint ('saya pasti bisa menguasai \"PHP\"');\n?&gt;\n</code></pre>"},{"location":"01/#komentar","title":"Komentar","text":"<ul> <li>Kita akan biasa menuliskan keterangan sebagai penanda skrip php kita, hal ini bisa dilakukan dengan menambahkan baris komentar.</li> <li>Jika komentar terdiri dari 1 baris, komentar bisa diawali dengan tanda <code>//</code> atau <code>#</code></li> <li>Jika komentar terdiri lebih dari satu baris, maka diawali dengan tanda <code>/*</code> dan diakhiri dengan tanda <code>*/</code>.</li> <li>Pada kebanyakan code editor, shortcut untuk membuat komentar adalah tombol Ctrl+/.</li> </ul> <p>Contoh membuat komentar</p> <pre><code>&lt;?php\n# ini adalah komentar\n\n// ini juga komentar\n\n/*\n* ini juga komentar\n* tapi lebih dari satu baris\n*/\n?&gt;\n</code></pre>"},{"location":"02/","title":"Dasar-dasar PHP","text":""},{"location":"02/#variabel","title":"Variabel","text":"<ul> <li>Variabel digunakan untuk menyimpan data berupa teks, angka dan sebagainya yang nilainya dapat diubah-ubah.</li> <li>Nama variabel bisa apa saja asal mengikuti aturan berikut:</li> <li>Nama variabel hanya boleh mengandung huruf, angka dan underscore.</li> <li>Nama variabel yang terdiri lebih dari satu kata dapat dipisahkan dengan underscore.</li> <li>Nama variabel tidak boleh menggunakan kata yang merupakan bagian dari skrip PHP.</li> <li>Penulisan nama variabel harus diawali dengan tanda dolar <code>$</code>.</li> <li>Variabel bersifat case-sensitive, sehingga huruf besar dan huruf kecil dibedakan.</li> </ul> <p>Contoh membuat variabel. Ketikkan kode berikut dan jalankan atau buka di dalam browser.</p> <pre><code>&lt;?php\n$kata = \"Semangat pagi kawan..!\";\necho $kata;\n?&gt;\n</code></pre>"},{"location":"02/#tipe-data","title":"Tipe Data","text":"<p>Variabel pada PHP dapat menyimpan berbagai macam tipe data, di antaranya:</p> <ul> <li>String, yaitu teks. Contoh: \"Selamat Pagi\" atau \"123\"</li> <li>Integer, yaitu angka non-desimal. Contoh: 1, 100, -400</li> <li>Float, yaitu tipe data angka desimal. Contoh: 23.5</li> <li>Boolean, tipe data yang hanya bernilai <code>true</code> atau <code>false</code> saja</li> <li>Array, yaitu tipe data yang menyimpan banyak nilai dalam satu variabel</li> <li>Object, yaitu tipe data yang menyimpan data beserta informasi bagaimana data diproses</li> <li>Null, yaitu tipe data yang hanya bernilai <code>NULL</code></li> </ul> <p>Contoh: <pre><code>&lt;?php\n$nama = \"Joko\";\n$umur = 17;\n\nvar_dump($nama);\nvar_dump($umur);\n?&gt;\n</code></pre></p>"},{"location":"02/#konstanta","title":"Konstanta","text":"<ul> <li>Konstanta digunakan untuk menyimpan nilai sederhana.</li> <li>Sekali didefinisikan/ dibuat, nilai konstanta tidak dapat dirubah, jika dirubah/ diisi ulang maka akan error.</li> <li>Penulisan nama konstanta sama dengan variabel, namun tidak menggunakan tanda <code>$</code>.</li> <li>Best Practice penulisan nama konstanta adalah dengan huruf kapital.</li> </ul> <p>Contoh membuat konstanta</p> <pre><code>&lt;?php\ndefine(\"APP\",\"Aplikasi Siswa\");\ndefine(\"VERSION\",\"1.0\");\n\necho APP . \" Versi \" . VERSION;\n?&gt;\n</code></pre>"},{"location":"02/#operator","title":"Operator","text":"<ul> <li>Setiap bahasa pemrograman pasti memiliki operator.</li> <li>Operator digunakan untuk melakukan operasi terhadap satu atau lebih data, atau variabel, sehingga menghasilkan data baru</li> </ul>"},{"location":"02/#operator-aritmatika","title":"Operator Aritmatika","text":"<p>Operator aritmatika merupakan operator untuk melakukan perhitungan aritmatika.</p> Operator Fungsi + Penjumlahan - Pengurangan * Perkalian / Pembagian % Modulus/ Sisa hasil bagi <p>Contoh</p> <pre><code>&lt;?php\n$x = 5;\n$y = 2;\n\necho \"$x + $y = \" . $x + $y . \"&lt;br&gt;\";\necho \"$x - $y = \" . $x - $y . \"&lt;br&gt;\";\necho \"$x * $y = \" . $x * $y . \"&lt;br&gt;\";\necho \"$x / $y = \" . $x / $y . \"&lt;br&gt;\";\necho \"$x % $y = \" . $x % $y . \"&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"02/#operator-perbandingan","title":"Operator Perbandingan","text":"<p>Digunakan untuk membandingkan 2 nilai atau variabel, hasilnya adalah true atau false.</p> Operator Arti == Sama dengan === Identik-sama dengan != atau &lt;&gt; Tidak sama dengan !== Tidak identik &gt; Lebih besar &lt; Lebih kecil &lt;= Lebih kecil atau sama dengan &gt;= Lebih besar atau sama dengan <p>Contoh:</p> <pre><code>&lt;?php\n$x = \"5\";\n$y = 5;\n\nvar_dump($x == $y);\nvar_dump($x === $y);\nvar_dump($x != $y);\nvar_dump($x !== $y);\nvar_dump($x &gt; $y);\nvar_dump($x &lt; $y);\nvar_dump($x &gt;= $y);\nvar_dump($x &lt;= $y);\n?&gt;\n</code></pre>"},{"location":"02/#operator-logika","title":"Operator Logika","text":"<p>Operator logika digunakan untuk menggabungkan dua pernyataan atau lebih, hasilnya true atau false.</p> Operator Arti <code>and</code> atau <code>&amp;&amp;</code> Benar jika kedua pernyataan benar <code>or</code> atau <code>\\|\\|</code> Benar jika salah satu atau keduanya bernilai benar <code>xor</code> Benar jika salah satu pernyataan bernilai benar, tetapi tidak keduanya <code>!</code> Benar jika pernyataanya salah"},{"location":"02/#operator-increment-dan-decrement","title":"Operator Increment dan Decrement","text":"<p>Operator ini digunakan untuk menambahkan atau mengurangi nilai variabel.</p> Operator Nama Keterangan ++$x Pre-increment Menambahkan variabel $x dengan 1, lalu mengembalikan nilai $x $x++ Post-increment Mengembalikan variabel $x, kemudian menambahkan nilai $x dengan 1 --$x Pre-decrement Mengurangi variabel $x dengan 1, lalu mengembalikan nilai $x $x-- Post-decrement Mengembalikan variabel $x, kemudian mengurangi dengan 1"},{"location":"02/#operator-assigment","title":"Operator Assigment","text":"<p>Operator ini digunakan untuk menentukan atau mengubah nilai suatu variabel numerik.</p> Assigment Sama dengan Keterangan $x = $y $x = $y Nilai x sama dengan nilai y $x += $y $x = $x + $y Nilai x ditambahkan dengan nilai y $x -= $y $x = $x - $y Nilai x dikurangi dengan nilai y $x *= $y $x = $x * $y Nilai x dikalikan dengan nilai y $x /= $y $x = $x / $y Nilai x dibagi dengan nilai y $x %= $y $x = $x % $y Nilai x modulus dengan nilai y"},{"location":"02/#operator-string","title":"Operator String","text":"<p>Operator ini digunakan untuk menggabungkan tipe data string.</p> Operator Contoh <code>.</code> <code>$kata = \"Saya sedang\".\"belajar PHP\";</code> <code>.=</code> <code>$kata .= \"dengan Semangat\";</code>"},{"location":"02/#operator-kondisi","title":"Operator Kondisi","text":"<ul> <li>Operator ini digunakan untuk memberikan nilai pada suatu variabel sesuai kondisi yang ditentukan.</li> <li>Jika kondisi true maka akan diberi nilai dengan nilai sebelah kiri tanda <code>:</code></li> <li>Jika kondisi false maka akan diberi nilai dengan nilai sebelah kanan tanda <code>:</code></li> <li>Kondisi diletakkan di dalam kurung diikuti dengan tanda <code>?</code> yang memisahkan dengan nilai.</li> <li>Formatnya <code>? ... : ...</code></li> </ul>"},{"location":"02/#array","title":"Array","text":"<p>Array merupakan variabel khusus yang dapat menyimpan nilai lebih dari satu.</p> <p>Beberapa jenis array: - Array Numerik - Array Asosiatif - Array 1 dimensi - Array 2 dimensi/ multi-dimensi</p> <p>Contoh:</p> <pre><code>&lt;?php\n// Array Numerik\n$hari = [\n    \"Senin\",\n    \"Selasa\",\n    \"Rabu\",\n    \"Kamis\",\n    \"Jum'at\",\n    \"Sabtu\",\n    \"Ahad\"\n];\nvar_dump($hari);\n\n// Array Asosiatif\n$siswa = [\n    \"nama\" =&gt; \"Joko Santoso\",\n    \"kelas\" =&gt; 11,\n    \"jurusan\" =&gt; \"PPLG\"\n];\nvar_dump($siswa);\n\n// Array 2 dimensi/ multi-dimensi\n$pegawai = [\n    \"nama\" =&gt; \"Rudi Hermanto\",\n    \"alamat\" =&gt; [\n        \"desa\" =&gt; \"Rejosari\",\n        \"kec\" =&gt; \"Kebonsari\",\n        \"kab\" =&gt; \"Madiun\"\n    ]\n];\nvar_dump($pegawai);\n?&gt;\n</code></pre>"},{"location":"02/#statement-control","title":"Statement Control","text":"<ul> <li>Statement control akan mengatur bagaimana data akan ditampilkan sesuai dengan kondisi tertentu</li> <li>Statement control menjadi kunci dari logika program</li> <li>Kesalahan dalam penggunaan statement control mungkin tidak menampilkan pesan error, tetapi aplikasi tidak berjalan sesuai semestinya.</li> </ul>"},{"location":"02/#percabangan-if","title":"Percabangan <code>IF</code>","text":"<p>Statement control ini digunakan untuk menjalankan suatu program tertentu jika sebuah sayrat kondisi terpenuhi. Formatnya adalah...</p> <pre><code>if (kondisi) statement;\n</code></pre> <p>Contoh:</p> <pre><code>&lt;?php\n$login = true;\nif($login) echo \"Selamat Datang\";\n?&gt;\n</code></pre> <p>Format di atas berlaku jika statement-nya hanya satu baris. Jika lebih dari satu baris, maka statement-nya menjadi:</p> <p><pre><code>if (kondisi){\n    statement1;\n    statement2;\n    // dan seterusnya...\n}\n</code></pre> Contoh:</p> <pre><code>&lt;?php\n$nama = \"Joko\";\n$nilai = 80;\n\nif($nilai &gt;= 80){\n    echo \"Selamat $nama,\";\n    echo \"Anda dinyatakan lulus..!\";\n}\n\nif($nilai &lt; 80){\n    echo \"Maaf $nama,\";\n    echo \"Anda dinyatakan belum lulus..!\";\n}\n?&gt;\n</code></pre> <p>Testing</p> <p>Sekarang coba ubah nilai 80 menjadi 70 dan jalankan skripnya. Apa hasilnya?</p>"},{"location":"02/#percabangan-if-else","title":"Percabangan <code>IF-ELSE</code>","text":"<p>Statement control ini digunakan menjalankan program tertentu jika sebuah kondisi terpenuhi, sekaligus menyediakan alternatif lain jika kondisi tidak terpenuhi. Format penulisannya adalah</p> <pre><code>&lt;?php\nif(kondisi){\n    // statement jika benar\n    statement1;\n    statement2;\n}else{\n    // statement jika salah\n    statement1;\n    statement2;\n}\n?&gt;\n</code></pre> <p>Format di atas digunakan jika statement-nya lebihd dari satu, namun jika statement-nya hanya satu, bisa menggunaka format berikut.</p> <pre><code>&lt;?php\nif(kondisi) //statement jika benar;\nelse //statement jika salah;\n?&gt;\n</code></pre> <p>Mari kita buat contohnya.</p> <pre><code>&lt;?php\n// statement 1 baris\n$nilai = 80;\nif($nilai&gt;=80) echo \"Anda lulus\";\nelse echo \"Maaf, anda belum lulus\";\n\n// statement 2 baris\n$nilai = 70;\nif($nilai &gt;= 80){\n    echo \"Selamat, Anda lulus\";\n}else{\n    echo \"Maaf, Anda belum lulus\";\n}\n?&gt;\n</code></pre>"},{"location":"02/#percabangan-if-elseif-else","title":"Percabangan <code>IF-ELSEIF-ELSE</code>","text":"<ul> <li>Statement control ini digunakan untuk mengecek kondisi berikutnya ketika kondisi pertama tidak terpenuhi.</li> <li>Jika semua kondisi tidak terpenuhi, maka dijalankan statement setelah <code>else</code>.</li> </ul> <p>Format sintakasnya</p> <pre><code>&lt;?php\nif(kondisi1){\n    // statement jika kondisi 1 benar\n}elseif(kondisi2){\n    // statement jika kondisi 2 benar\n}else{\n    // statement jika semua kondisi salah\n}\n?&gt;\n</code></pre> <p>MARKICOB (Mari kita coba...\ud83d\ude0a)</p> <pre><code>&lt;?php\n$nilai = 85;\n\nif($nilai&lt;60){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : E\";  \n}elseif($nilai&lt;70){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : D\";\n}elseif($nilai&lt;80){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : C\";\n}elseif($nilai&lt;90){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : B\";\n}elseif($nilai&lt;=100){\n    echo \"Nilai : A\";\n}else{\n    echo \"Maaf nilai tidak sah\";\n}\n?&gt;\n</code></pre> <p>Eksperimen</p> <p>Sekarang agar lebih interaktif, coba tambahkan fungsi php untuk mengambil input user, yaitu dengan mengganti <code>$nilai = 80;</code> menjadi <pre><code>&lt;?php\necho \"Masukkan nilai : \";\n$nilai = fgets(STDIN);\n?&gt;\n</code></pre></p>"},{"location":"02/#percabangan-switch","title":"Percabangan <code>SWITCH</code>","text":"<ul> <li>Statement control ini digunakan untuk menjalankan program pada setiap kemungkinan nilai dari sebuah  variabel.</li> <li>Ini fungsinya hampir sama dengan <code>IF</code>, namun untuk penggunaan yang lebih sederhana.</li> </ul> <p>Formatnya adalah</p> <pre><code>&lt;?php\nswitch($variabel){\n    case \"option1\": statement1;\n    break;\n    case \"option2\": statement2;\n    break;\n    default: statement3;\n    break;\n}\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Statement pada <code>default</code> akan dijalankan ketika semua option sebelumnya tidak terpenuhi.</li> <li>Setiap statement harus dikuti dengan <code>break;</code> untuk menghentikan proses pengecekan kepada option selanjutnya.</li> </ul> <p>Berikut contohnya</p> <pre><code>&lt;?php\n$kode = 1;\n\nswitch($kode){\n    case 1:\n        echo \"Selamat datang Admin\";\n        break;\n    case 2:\n        echo \"Selamat datang User\";\n        break;\n    case 3:\n        echo \"Selamat datang Tamu\";\n        break;\n    default:\n        echo \"Maaf, Akses ditolak..!\";\n        break;\n}\n?&gt;\n</code></pre> <p>Percobaan</p> <p>Seperti sebelumnya, agar lebih interaktif, coba buat aagr nilai <code>$kode</code> diinput langsung dari user dan sebelumnya tampilkan teks <code>Masukkan Kode Rahasia</code>.</p>"},{"location":"02/#perulangan-while","title":"Perulangan <code>WHILE</code>","text":"<p>While digunakan untuk menjalankan program secara berulang-ulang selama kondisi masih terpenuhi. Format penulisannya adalah</p> <pre><code>&lt;?php\nwhile(kondisi){\n    statement;\n}\n?&gt;\n</code></pre> <p>Mari kita buat contohnya</p> <pre><code>&lt;?php\n$no = 1;\nwhile($no &lt;= 10){\n    echo \"Antrian ke-$no \\n\";\n    $no++;\n}\n?&gt;\n</code></pre> <p>Peringatan</p> <ul> <li>Hati-hati dalam membuat perulangan, baik while atau yang lain, pastikan kamu membuat counter dan batas perulangannya, karena kalau tidak, bisa saja perulangan kamu akan terus dilakukan sampai memori komputer penuh yang akhirnya membuat komputer kamu mati.</li> <li>Dalam contoh di atas, betasan perulangannya adalah <code>$no &lt;=10</code> dan penambah counter <code>$no++</code>.</li> <li>Kalau program dijalankan dengan terminal/ command promt, cara menghentikannya adalah dengan menekan tombol Ctrl+C , tetapi jika perulangan dijalankan di sisi server menggunakan browser, bisa-bisa servernya yang terjadi memory overflow dan mati.</li> </ul> <p>Percobaan</p> <ul> <li>Sekarang coba buat sebuah perkalian berulang seperti dulu ketika kamu masih di bangku sekolah dasar kamu diminta untuk menghafalkan daftar perkalian!, masih ingat?</li> <li>Contoh hasilnya seperti berikut </li> </ul>"},{"location":"02/#perulangan-do-while","title":"Perulangan <code>DO-WHILE</code>","text":"<ul> <li>Hampir sama seperti wbile, statement control ini digunakan untuk menjalankan program secara berulang-ulang selama kondisi terpenuhi.</li> <li>Bedanya, kalau do-while, statement-nya dijalankan terlebih dahulu, tanpa harus mengecek kondisinya terlebih dahulu.</li> <li>Hal ini memungkinkan perulangan do-while melakukan minimal 1 kali, walaupun kondisinya tidak terpenuhi.</li> </ul> <p>Format sintaksnya adalah</p> <pre><code>&lt;?php\ndo{\n    statement;\n}while(kondisi);\n?&gt;\n</code></pre> <p>Berikut contohnya</p> <pre><code>&lt;?php\n$angka = 100;\ndo{\n    echo \"Hitungan ke $angka\\n\";\n    $angka++;\n}while($angka&lt;=10);\n?&gt;\n</code></pre> <p>Perulangan di atas dirasa agak aneh, padahal kan perulangannya, harusnya dilakukan ketika variabel <code>$angka</code> bernilai lebih kecil atau sama dengan 10, namun begitulah cara kerja perulangan do-while.</p>"},{"location":"02/#perulangan-for","title":"Perulangan <code>FOR</code>","text":"<ul> <li>Secara prinsip, statement control ini sama seperti perulangan while dan do-while.</li> <li>Namun, saat menggunakan perulangan for, kita langsung menentukan batas awal dan akhir perulangannya.</li> <li>Formatnya sebagai berikut.</li> </ul> <pre><code>&lt;?php\nfor(init_statement ; kondisi ; post_statement){\n    // blok perulangan\n}\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Init statement akan dieksekusi hanya sekali di awal sebelum perulangan</li> <li>Kondisi akan dilakukan pengecekan dalam setiap perulangan, jika true perulangan akan dilakukan, jika false perulangan akan berhenti</li> <li>Post statement akan dieksekusi setiap kali diakhir perulangan</li> <li>Init statement, Kondisi dan Post Statement tidak wajib diisi, jika Kondisi tidak diisi, berarti kondisi selalu bernilai true</li> </ul> <p>Contoh-1 <pre><code>&lt;?php\n// Perulangan for tanpa henti\nfor(;;){\n    echo \"Saya berjanji tidak akan membolos lagi\\n\\n\";\n}\n?&gt;\n</code></pre></p> <p>Contoh-2 <pre><code>&lt;?php\n// Perulangan for dengan kondisi\n$counter = 1;\nfor(;$counter&lt;=10;){\n    echo \"Antrian ke-$counter\\n\";\n    $counter++;\n}\n?&gt;\n</code></pre> Contoh-3 <pre><code>&lt;?php\n// Perulangan for dengan init statement\nfor($counter=11; $counter&lt;=25;){\n    echo \"Antrian ke : $counter\\n\";\n    $counter++;\n}\n?&gt;\n</code></pre></p> <p>Contoh-4 <pre><code>&lt;?php\n// Perulangan for dengan post-statement\nfor($i=1; $i&lt;=100; $i++){\n    echo \"Antrian Sembako ke-$i\\n\";\n}\n?&gt;\n</code></pre></p>"},{"location":"02/#perulangan-foreach","title":"Perulangan <code>FOREACH</code>","text":"<p>Statement control ini digunakan khusus untuk melakukan perulangan pada data array. Format penulisannya</p> <pre><code>&lt;?php\nforeach($variabel as $alias){\n    statement;\n}\n?&gt;\n</code></pre> <p>Jika jenis array-nya array asosiatif, maka formatnya</p> <pre><code>&lt;?php\nforeach($variabel as $key =&gt; $value){\n    statement;\n}\n?&gt;\n</code></pre> <p>Contoh-1 <pre><code>&lt;?php\n// Foreach array numerik\n$buah = [\"Jeruk\",\"Mangga\",\"Apel\"];\necho \"Es \";\nforeach($buah as $b){\n    echo \"$b, \";\n}\necho \"Sori nggak level..!\ud83d\ude0a\";\n?&gt;\n</code></pre></p> <p>Jalankan dan baca dengan intonasi, xixixi \ud83e\udd2d</p> <p>Contoh-2 <pre><code>&lt;?php\n// Foreach dengan array asosiatif\n$siswa=[\n    \"nama\" =&gt; \"Dita Leni Ravia\",\n    \"kelas\" =&gt; 11,\n    \"jurusan\" =&gt; \"PPLG\"\n];\n\nforeach($siswa as $key =&gt; $value){\n    echo \"$key : $value \\n\";\n}\n?&gt;\n</code></pre></p> <p>Tantangan</p> <ul> <li>Sekarang coba buat array 2 dimensi seperti berlikut, amati dengan baik, lalu gunakan perulangan foreach untuk menampilkan seluruh datanya. Clue-nya adalah <code>foreach bersarang</code>.     <pre><code>&lt;?php\n// Foreach dengan array 2 dimensi\n$siswa=[\n    [\n        \"nis\" =&gt; 881,\n        \"nama\" =&gt; \"Roro Jonggrang\",\n        \"nilai\" =&gt; 95\n    ],\n    [\n        \"nis\" =&gt; 882,\n        \"nama\" =&gt; \"Roro Kidul\",\n        \"nilai\" =&gt; 100\n    ],\n    [\n        \"nis\" =&gt; 883,\n        \"nama\" =&gt; \"Joko Tingkir\",\n        \"nilai\" =&gt; 90\n    ]\n    ];\n?&gt;\n</code></pre></li> </ul> Buka Jawaban <pre><code>&lt;?php\n// Foreach dengan array 2 dimensi\n$siswa=[\n    [\n        \"nis\" =&gt; 881,\n        \"nama\" =&gt; \"Roro Jonggrang\",\n        \"nilai\" =&gt; 95\n    ],\n    [\n        \"nis\" =&gt; 882,\n        \"nama\" =&gt; \"Roro Kidul\",\n        \"nilai\" =&gt; 100\n    ],\n    [\n        \"nis\" =&gt; 883,\n        \"nama\" =&gt; \"Joko Tingkir\",\n        \"nilai\" =&gt; 90\n    ]\n    ];\n\nforeach($siswa as $tokoh){\n    foreach($tokoh as $data =&gt; $nilai){\n        echo \"$data : $nilai\\n\";\n    }\n}\n?&gt;\n</code></pre>"},{"location":"02/#modularitas","title":"Modularitas","text":"<ul> <li>Saat membuat aplikasi, ada baiknya tidak dibuat dalam satu file Lebih baik dipisah ke beberapa file agar kode program tidak terlalu bertumpuk di satu file.</li> <li>PHP memiliki function require dan include yang bisa kita gunakan untuk mengambil file php lain.</li> <li>Lantas apa bedanya require dan include?</li> <li>Pada require, jika file yang kita ambil tidak ada, maka akan terjadi error dan program terhenti.</li> <li>Pada include, jika file yang kita ambil tidak ada, maka hanya akan memberi peringatan, namun program akan tetap dilanjutkan.</li> </ul> <p>Sebagai contoh, kita buat file pertama yaitu modul.php</p> <pre><code>&lt;?php\necho \"Halo.., Ini pesan dari file modul.php\"\n?&gt;\n</code></pre> <p>Lalu kita buat file kedua, yaitu include.php</p> <pre><code>&lt;?php\necho \"Ini pesan dari file include.php \\n\";\ninclude \"modul.php\";\n?&gt;\n</code></pre> <p>Sekarang jalankan file include.php, maka perintah echo dari file <code>include.php</code> dan <code>modul.php</code> akan ditampilkan semuanya.</p> <p>Satu lagi, coba buat file require.php sebagai berikut.</p> <pre><code>&lt;?php\nrequire \"fungsi.php\";\necho \"ini pesan dari file require.php \\n\";\n?&gt;\n</code></pre> <p>Jalankan skrip php di atas, dan apa hasilnya? \ud83e\udd14</p> Benar <p>Muncul pesan Error... karena file yang dipanggil menggunakan <code>require</code> tidak ada, yaitu <code>fungsi.php</code>.</p> <p>Catatan Tambahan</p> <ul> <li>Function <code>require</code> dan <code>include</code> akan selalu mengambil file yang kita inginkan.</li> <li>Jika kita beberapa kali menggunakan <code>require</code> dan <code>include</code> file yang sama, maka file tersebut akan berkali-kali pula kita ambil.</li> <li>Hal ini akan menjadi masalah jika misal dalam file yang kita ambil terdapat definisi function , sehingga jika diambil berkali-kali akan menyebabkan error redeclare function.</li> <li>Untungnya di PHP terdapat function <code>require_once</code> dan <code>include_once</code>, function ini bisa mendeteksi jika kita sebelumnya pernah mengambil file yang sama, maka tidak akan diambil lagi</li> </ul>"},{"location":"03/","title":"Function","text":"<ul> <li>Function digunakan untuk membuat blok program yang sering digunakan di dalam penulisan skrip PHP.</li> <li>Function tidak otomatis dijalankan ketika skrip dijalankan.</li> <li>Function hanya dieksekusi jika dipanggil.</li> <li>Pemanggilan function dapat dilakukan berkali-kali setiap kali dibutuhkan.</li> <li>Function biasanya digunakan untuk meyingkat skrip yang sering digunakan, terutama yang skrip-nya panjang.</li> <li>Secara umum, setidaknya ada 2 jenis function, yaitu<ol> <li>User-defined function, fungsi yang dibuat sendiri oleh user.</li> <li>Built-in function, fungsi yang sudah disediakan oleh PHP.</li> </ol> </li> </ul>"},{"location":"03/#function-dasar","title":"Function Dasar","text":"<p>Untuk membuat function format dasarnya sebagai berikut.</p> <pre><code>&lt;?php\nfunction nama_function(argumen){\n    // blok program\n}\n?&gt;\n</code></pre> <p>Sekarang kita buat contohnya.</p> <p><pre><code>&lt;?php\n// membuat function\nfunction salam(){\n    echo \"Assalamu'alaikum..,\";\n}\n\n// memanggil function\nsalam();\nsalam();\n?&gt;\n</code></pre> Coba jalankan skrip di atas, maka akan muncul pesan \"Assalamu'alaikum..,\" sebanyak 2 kali, karena kita memanggilnya 2 kali.</p>"},{"location":"03/#function-dengan-argumen","title":"Function dengan Argumen","text":"<p>Ada kalanya kita membuat function untuk memproses data tertentu, sehingga kita perlu membuat function yang bisa menerima argumen. Berikut contohnya.</p> <pre><code>&lt;?php\n// membuat function\nfunction sapa($nama){\n    echo \"Hai $nama, Apa kabar?\\n\";\n}\n\n// memanggil function\nsapa(\"Joko\");\nsapa(\"Dita\");\n?&gt;\n</code></pre> <ul> <li>Pada skrip di atas, function memiliki 1 argumen, yaitu $nama.</li> <li>Kita bisa loh.., membuat argumen lebih dari 1, yaitu dengan memisahkan argumen dengan tanda koma <code>.</code> .</li> <li>Variabel yang kita definisikan di dalam function disebut sebagai parameter, sedangkan nilai yang kita masukkan saat pemanggilan fungsi disebut sebagai argumen.</li> <li>Saat kita mencoba memanggil fungsi yang memiliki parameter, namun kita lupa memasukkan argumennya, tentu akan terjadi error.</li> <li>Untuk mengatasi hal tersebut kita bisa membuat default argument, sehingga jika kita lupa tidak memasukkan argumen saat pemanggilan function, tidak akan terjadi error dan function akan dijalankan dengan normal. Contoh</li> </ul> <pre><code>&lt;?php\n// Membuat function\nfunction sapa($waktu=\"Pagi\"){\n    echo \"Selamat $waktu \\n\";\n}\n\n// Memanggil function dengan argumen\nsapa(\"Siang\");\n// Memanggil function tanpa argumen\nsapa();\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Mungkin suatu saat kita membuat function yang memiliki 2 parameter atau lebih dan ada yang memiliki default argumen maupun tidak.</li> <li>Untuk membuat function tersebut, kita tidak boleh asal dala meletakkan urutan parameternya, karena kalau tidak, PHP akan salah paham dalam memproses nilai argumennya.</li> <li>Dalam kasus di atas, parameter yang tidak memiliki default argument harus diletakkan di depan, sedangkan parameter yang memiliki default argument harus diletakkan di urutan belakang.</li> </ul> <p>Contoh-1 <pre><code>&lt;?php\n// function dengan urutan default argumen salah\nfunction sapa($nama=\"Kamu\", $waktu){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Dita\",\"Pagi\");\n?&gt;\n</code></pre></p> <ul> <li>Mungkin skrip di atas jika dijalankan akan berhasil, namun tetap menghasilkan error.</li> <li>Bagaimana jika kita ingin menjalankan skripnya tapi anggaplah saya hanya ingin mengisi argumen <code>$waktu</code> nya saja, karena argumen <code>$nama</code> memiliki default argumen, seperti contoh berikut.</li> </ul> <pre><code>&lt;?php\n// function dengan urutan default argumen salah\nfunction sapa($nama=\"Kamu\", $waktu){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Pagi\");\n?&gt;\n</code></pre> <p>Tentu saja Error</p> <p>Deprecated: Optional parameter $nama declared before required parameter $waktu is implicitly treated as a required parameter in C:\\Users\\ASUS\\Documents\\GitHub\\modul-belajar-php-dasar\\sourcecode\\function\\function4.php on line 3</p> <p>Contoh-2</p> <p>Maka, yang benar harusnya seperti ini.</p> <p><pre><code>&lt;?php\n// function dengan urutan default argumen yang benar\nfunction sapa($waktu, $nama=\"Kamu\"){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Pagi\");\n?&gt;\n</code></pre> Walaupun, saya tidak memasukan argumen <code>$nama</code>, kode tetap akan dijalankan tanpa error.</p> <p>Tantangan</p> <ul> <li> <p>Sebagai bentuk latihan, coba sekarang buatlah sebuah fungsi perkalian dengan nama <code>perkalian()</code>, yang jika saya memanggil dengan cara <code>perkalian(2)</code> maka menghasilkan seperti berikut. <code>(Clue-nya gabungkan perulangan ke dalam function)</code>. \ud83e\udd14</p> <p>1 x 2 = 2</p> <p>2 x 2 = 4</p> <p>3 x 2 = 6</p> <p>4 x 2 = 8</p> <p>5 x 2 = 10</p> <p>6 x 2 = 12</p> <p>7 x 2 = 14</p> <p>8 x 2 = 16</p> <p>9 x 2 = 18</p> <p>10 x 2 = 20</p> </li> </ul> Jawaban <pre><code>&lt;?php\n// Membuat fungsi perkalian\nfunction perkalian($angka){\n    for($i=1; $i&lt;=10; $i++){\n        echo \"$i x $angka = \" . $i*$angka . \"\\n\";\n    }\n}\n// memanggil fungsi perkalian\nperkalian(2);\n?&gt;\n</code></pre>"},{"location":"03/#function-dengan-nilai-kembalian","title":"Function dengan Nilai Kembalian","text":"<ul> <li>Pada contoh-contoh sebelumnya, kita membuat function yang langsung menampilkan hasilnya di layar dengan perintah <code>echo</code>.</li> <li>Namun, ada kalanya kita membuat function lalu hasilnya akan diproses lagi oleh function yang lain.</li> <li>Dalam kasus tersebut kita perlu menambahkan perintah <code>return</code> yang akan memberikan nilai kembalian.</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\nfunction luas_persegi($panjang, $lebar){\n    $luas = $panjang * $lebar;\n    return $luas;\n}\n\necho \"Luas ruang kelas adalah \" . luas_persegi(3,4) . \" m\";\n?&gt;\n</code></pre> <p>Contoh-2</p> <p><pre><code>&lt;?php\nfunction nama_panggilan($nama){\n    return substr($nama,0,5);\n}\n\n$namanya = nama_panggilan(\"joko santoso\");\necho ucfirst($namanya);\n?&gt;\n</code></pre> S</p> <p>Keterangan</p> <ul> <li><code>substr</code> adalah fungsi bawaan php untuk mengambil beberapa karakter string dari kiri, <code>0</code> maksudnya dimulai dari karakter ke 0, dan <code>5</code> maksudnya ambil sebanyak 5 karakter.</li> <li><code>ucfirst</code> juga fungsi bawaan php yang berfungsi untuk membuat teks/ string menjadi kapital pada huruf pertamanya.</li> </ul>"},{"location":"03/#variasi-function-yang-lain","title":"Variasi Function yang lain","text":"<ul> <li>Selain function standar di atas, sebenarnya di PHP kita bisa membuat function dengan penulisan yang sedikit berbeda, lebih rumit, atau bahkan lebih simpel dari format dasarnya.</li> <li>Hal ini tentunya disesuaikan dengan kebutuhan program atau aplikasi yang akan kita buat.</li> </ul>"},{"location":"03/#anonymous-function","title":"Anonymous Function","text":"<ul> <li>Anonymous function adalah function tanpa nama, di PHP disebut juga dengan Closure.</li> <li>Anonymous function biasanya digunakan sebagai argument atau sebagai value di variable.</li> <li>Anonymous function membuat kita bisa mengirim function sebagai argument di function lainnya.</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\n// Anonymous Function\n$halo = function(string $nama){\n    echo \"Halo $nama\".PHP_EOL;\n};\n\n$halo(\"Eko\");\n$halo(\"Joko\");\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Perhatikan, bahwasanya saat membuat function, kita tidak membuat nama function-nya, namun langsung membuat bagian parameternya.</li> <li>Function tersebut langsung dimasukkan ke dalam variable <code>$halo</code>.</li> <li>Cara pemanggilan function tinggal menyebut nama variable yang berisi function tersebut, dalam hal ini adalah <code>$halo</code>.</li> </ul> <p>Contoh-2</p> <pre><code>&lt;?php\n// Anonymous Functtion 2\nfunction siyu(string $nama, $format){\n    $namaAkhir = $format($nama);\n    echo \"See you $namaAkhir\".PHP_EOL;\n}\n\n// Memanggil function\nsiyu(\"Dita Leni Ravia\", function(string $n){\n    return strtoupper($n);\n})\n?&gt;\n</code></pre> <p>Peringatan</p> <ul> <li>Mungkin, function tersebut terlihat membingungkan untuk difahami, namun cobalah untuk membaca dan memahami maksud dari tiap baris kodenya.</li> <li><code>strtoupper()</code> adalah function bawaan PHP untuk membuat teks menjadi huruf kapital.</li> </ul> <p>Catatan</p> <ul> <li>Secara default, anonymous function tidak bisa mengakses variabel yang terdapat diluar function.</li> <li>Jika kita ingin menggunakan variable yang terdapat diluar anonymous function, kita perlu secara explicit menyebutkannya menggunakan kata kunci use lalu diikuti variable-variable yang ingin kita gunakan.</li> </ul> <p>Sekarang coba ini..!</p> <pre><code>&lt;?php\n$namaDepan = \"Anggun\";\n$namaBelakang = \"Khowatim\";\n\n$hai = function(){\n    echo \"Hai $namaDepan $namaBelakang\".PHP_EOL;\n};\n\n$hai();\n?&gt;\n</code></pre> <p>Kalau begini..?</p> <pre><code>&lt;?php\n// Akses variable di luar closure\n$namaDepan = \"Aulia\";\n$namaBelakang = \"Fatmawati\";\n\n$hai = function() use($namaDepan,$namaBelakang){\n    echo \"Hai $namaDepan $namaBelakang\".PHP_EOL;\n};\n\n$hai();\n?&gt;\n</code></pre> <p>Yeay.. Berhasil \ud83d\ude01</p>"},{"location":"03/#arrow-function","title":"Arrow Function","text":"<p>Satu lagi kita bahas tentang variasi function di dalam PHP, walaupun sebenarnya masih banyak variasi function yang lain \ud83d\ude05.</p> <ul> <li>Arrow function diperkenalkan di PHP 7.4 sebagai alternative anonymous function yang lebih sederhana pembuatannya.</li> <li>Secara garis besar, sebenarnya arrow function dan anonymous function adalah dua hal yang sama.</li> <li>Hal yang membedakan di arrow function adalah, secara otomatis variable diluar closure bisa digunakan, tidak seperti di anonymous function yang harus disebutkan secara manual menggunakan kata kunci use.</li> <li>Pembuatan arrow function tidak menggunakan kata kunci function, melainkan fn.</li> <li>Arrow function di khususnya untuk pembuatan function yang sederhana</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\n// Arrow Function\n$a = 5;\n$b = 4;\n\n$kali = fn()=&gt;$a*$b;\n\necho $kali();\n?&gt;\n</code></pre> <p>Contoh-2</p> <pre><code>&lt;?php\n// Arrow Function-2\n$n1=\"Faruq\";\n$n2=\"Arzaky\";\n\n$goodbye = fn()=&gt;\"Goodbye $n1 $n2\".PHP_EOL;\n\necho $goodbye();\n?&gt;\n</code></pre> <p>Penutup</p> <ul> <li>Terlihat jelas bahwa pembuatan function dengan arrow function sangat sederhana, namun kita tidak bisa membuat function ini untuk setiap program yang kita buat, semua tergantung kebutuhan sistemnya.</li> <li>Kita cukupkan pembahasan tentang function kali ini, jika anda masih tertarik ingin tahu lebih tentang function, silahkan coba cari sendiri materinya dengan keyword Callback Function dan Recrusive Function. \ud83d\ude0a</li> </ul>"},{"location":"03/#function-untuk-operasi-string","title":"Function untuk Operasi String","text":"<p>Untuk memanipulasi string, PHP sudah menyediakan function bawaan yang bisa langsung kita gunakan. Di antaranya sebagai berikut.</p> Function Keterangan <code>addslashes(string)</code> Memberikan tanda <code>\\</code> pada karakter khusus seperti petik ganda <code>\"</code>, petik tunggal <code>'</code> dan sebagainya. <code>chr(ascii)</code> Menghasilkan karakter dari sebuah kode ASCII <code>explode(pemisah, string, batas)</code> Mengkonversi string menjadi array. Fungsi ini sering dipakai <code>htmlentities(string, flags, character_set, double_encode)</code> Mengkonversi karakter ke kode HTML <code>htmlspecialchars(string,flags,character_set,double_encode)</code> Mengkonversi karakter tertentu ke kode HTML <code>implode(pemisah, array)</code> Menghasilkan string dari suatu array. Kebalikan dari <code>implode()</code>, ini juga sering dipakai. <code>join(pemisah, array)</code> Menghasilkan string dari suatu array. Alias dari <code>implode()</code>. <code>lcfirst(string)</code> Lowercase First, mengkonversi string pertama menjadi huruf kecil. <code>ltrim(string, charlist)</code> Menghilangkan spasi atau karakter tertentu di sebelah kiri string. <code>md5(string, raw)</code> Enkripsi dengan MD5 dari sebuah string. RAW menentukan format output binary atau heksadesimal, diisi <code>true</code> atau <code>false</code>. <code>nl2br(string,xhtml)</code> Menyisipkan tag <code>&lt;br&gt;</code> pada setiap ganti baris dari sebuah string. XHTML diisi <code>true</code> atau <code>false</code>. <code>number_format(number, desimal, pemisah desimal, pemisah ribuan)</code> Memformat angka menjadi ribuan. <code>printf(format, arg1, arg2, arg3, ...)</code> Menghasilkan string dengan format tertentu. <code>rtrim(string, charlist)</code> Menghilangkan spasi atau karakter tertentu pada sebelah kanan string. <code>str_ireplace(dicari, pengganti, string, jumlah)</code> Mengganti beberapa karakter pada sebuah string tanpa membedakan besar kecilnya huruf. <code>str_replace(dicari, pengganti, string, jumlah)</code> Mengganti beberapa karakter pada sebuah string dengan membedakan besar kecilnya huruf. <code>str_shuffle(string)</code> Mengacak karakter pada sebuah string. <code>str_word_count(string, return, char)</code> Menghasilkan jumlah karakter dari sebuah string <code>stripslashes(string)</code> Mengembalikan perintah <code>addslashesh()</code> <code>strlen(string)</code> Menghasilkan panjang sebuah string. <code>strpos(string, dicari, mulai)</code> Menghasilkan posisi pertama dari sebuah string pada suatu string. Versi case-insensitice menggunakan <code>strripos()</code>. <code>strrpos(string, dicari, mulai)</code> Menghasilkan posisi terakhir sebuah string pada suatu string. Versi case-insensitive menggunakan <code>strripos()</code>. <code>strtolower(string)</code> Mengkonversi string ke huruf kecil semua. <code>strtoupper(string)</code> Mengkonversi string ke huruf besar semua. <code>substr(string, mulai, panjang)</code> Menghasilkan bagian dari sebuah string. <code>trinm(string, charlist)</code> Menghilangkan spasi atau karakter lain di awal maupun akhir string. <code>ucfirst(string)</code> Mengubah hurug pertama string menjadi huruf kapital. <code>ucwords(string)</code> Mengubah huruf pertama setiap kata dari sebuah string menjadi huruf kapital. <p>Untuk lebih memahami penggunaan dari fungsi-fungsi di atas, mari kita coba beberapa.</p> <pre><code>&lt;?php\n$teks = \"Saya senang belajar PHP\";\necho \"Teks asli '$teks'\".PHP_EOL;\n\necho \"substr() : \" . substr($teks,0,11) . PHP_EOL;\necho \"susbtr() : \" . substr($teks,12) . PHP_EOL;\necho \"strtoupper() : \" . strtoupper($teks) . PHP_EOL;\necho \"ucwords() : \" . ucwords($teks) . PHP_EOL;\necho \"str_replace() : \" . str_replace(\"senang\",\"suka\",$teks) . PHP_EOL;\necho \"strops() : \" . strpos($teks,\"P\") . PHP_EOL;\n\n$kata = explode(' ',$teks);\necho \"explode() : \" . $kata[1];\n\n?&gt;\n</code></pre> <p>Referensi</p> <p>Jika kamu tertarik mempeljari string function yang lain, bisa kunjungi \ud83c\udf0f link berikut.</p>"},{"location":"03/#function-untuk-operasi-tanggal","title":"Function untuk Operasi Tanggal","text":"<p>PHP juga menyediakan functio bawaan untuk memproses data tanggal, sebagaimana berikut.</p>"},{"location":"03/#function-date","title":"Function <code>date()</code>","text":"<ul> <li>Function ini digunakan untuk mencetak tanggal dengan format tertentu.</li> <li>Format tanggal ditulis di dalam kurung.</li> <li>Beberapa huruf yang dapat digunakan untuk menulis format tanggal sebagai berikut.</li> </ul> <p>Time</p> Huruf Keterangan a am atau pm A AM atau PM g Jam tanpa 0 di depan, bernilai antara 1-12 G Jam tanpa 0 di depan, bernilai antara 0-23 h Jam dengan 0 di depan, bernilai antara 1-12 H Jam dengan 0 di depan, bernilai antara 00-23 i Menit dengan 0 di depan, bernilai antara 00-59 s detik dengan 0 di depan, bernilai antara 00-59 <p>Day</p> Huruf Keterangan d Tanggal dengan 0 di depan, bernilai antara 01-31 j Tanggal tanpa 0 di depan, bernilai antara 1-31 D Hari dalam mingguan(singkatan), bernilai antara Sun - Sat I Hari dalam mingguan, bernilai antara Sunday - Saturday w Hari dalam mingguan tanpa 0 di depan, bernilai antara 0 - 6 w Hari dalam tahunan tanpa 0 di depan, bernilai antara 0 - 365 <p>Month</p> Huruf Keterangan m Bulan dengan 0 di depan, bernilai antara 01 - 12 n Bulan tanpa 0 di depan, bernilai antara 1 - 12 M Singkatan dari bulan, bernilai antara Jan - Dec F Nama bulan lengkap, bernilai antara January - December t Jumlah hari dalam sebulan, bernilai antara 28 -  31 <p>Year</p> Huruf Keterangan L 1 jika melompati tahun, dan 0 jika tidak Y Tahun dengan 4 digit y Tahun dengan 2 digit <p>Agar lebih memahami penggunaan fungsi-fungsi di atas, mari kita coba beberapa, yang sering digunakan.</p> <pre><code>&lt;?php\n// Function date\necho date('Y/m/d') . PHP_EOL;\necho date('d-m-Y H:i:s a') . PHP_EOL;\necho date('d F Y');\n?&gt;\n</code></pre>"},{"location":"03/#function-mktime","title":"Function <code>mktime()</code>","text":"<p>Function ini digunakan untuk membuat timestamp dengan format sintaks sebagai berikut.     <code>mktime(hour, minute, second, month, day, year);</code></p> <p>Contoh</p> <pre><code>&lt;?php\n// Function mktime()\n$sekarang = mktime(12, 13, 40, date('m'), date('d'), date('Y'));\necho \"Sekarang tanggal \" . date('d F Y', $sekarang);\necho \"\\n\";\n\n$bulanlalu = mktime(0, 0, 0, date('m')-1, date('d'), date('Y'));\necho \"Satu bulan yang lalu adalah tanggal \" . date('d F Y', $bulanlalu);\necho \"\\n\";\n\n$lusa = mktime(0, 0, 0, date('m'), date('d')+2, date('Y'));\necho \"Lusa adalah tanggal \" . date('d F Y', $lusa);\necho \"\\n\";\n\n$tahun = mktime(0, 0, 0, date('m'), date('d'), date('Y')-2);\necho \"Dua tahun yang lalu adalah tanggal \" . date('d F Y', $tahun);\n\n?&gt;\n</code></pre> <p>Informasi</p> <p>Selain 2 function yang paling sering digunakan di atas, beberapa function yang berkenaan dengan penggunaan tanggal yaitu <code>date_default_timezone_set()</code> untuk menentukan timezone dan <code>strtotime()</code> untuk mengubah string menjadi format tanggal atau waktu. \ud83d\ude0a</p>"},{"location":"03/#function-untuk-operasi-matematika","title":"Function untuk Operasi Matematika","text":"<p>Untuk operasi matematika, banyak sekali function bawaan PHP yang bisa langsung kita gunakan, sebagai berikut.</p> Function Keterangan Contoh <code>abs($number)</code> Mengembalikan nilai absolut dari sebuah bilangan. <code>echo abs(-5); // 5</code> <code>round($number, $precision = 0, $mode = PHP_ROUND_HALF_UP)</code> Membulatkan bilangan ke nilai terdekat dengan presisi opsional. <code>echo round(4.5); // 5</code> <code>ceil($number)</code> Membulatkan sebuah bilangan ke atas (ke nilai integer terdekat). <code>echo ceil(4.3); // 5</code> <code>floor($number)</code> Membulatkan sebuah bilangan ke bawah (ke nilai integer terdekat). <code>echo floor(4.7); // 4</code> <code>max(...$values)</code> Mengembalikan nilai maksimum dari serangkaian bilangan. <code>echo max(1, 3, 5); // 5</code> <code>min(...$values)</code> Mengembalikan nilai minimum dari serangkaian bilangan. <code>echo min(1, 3, 5); // 1</code> <code>rand($min, $max)</code> Mengembalikan bilangan acak dalam rentang tertentu. <code>echo rand(1, 10); // Contoh: 7</code> <code>sqrt($number)</code> Mengembalikan akar kuadrat dari sebuah bilangan. <code>echo sqrt(16); // 4</code> <code>pow($base, $exp)</code> Mengembalikan hasil dari bilangan berpangkat (eksponen). <code>echo pow(2, 3); // 8</code> <code>pi()</code> Mengembalikan nilai \u03c0 (pi) sebagai bilangan floating-point. <code>echo pi(); // 3.14159</code> <code>log($number, $base = M_E)</code> Mengembalikan logaritma dari sebuah bilangan, dengan basis opsional. <code>echo log(8, 2); // 3</code> <code>deg2rad($degrees)</code> Mengonversi sudut dari derajat ke radian. <code>echo deg2rad(180); // 3.14159</code> <code>rad2deg($radians)</code> Mengonversi sudut dari radian ke derajat. <code>echo rad2deg(3.14159); // 180</code> <code>cos($number)</code> Mengembalikan kosinus dari sebuah bilangan (dalam radian). <code>echo cos(0); // 1</code> <code>sin($number)</code> Mengembalikan sinus dari sebuah bilangan (dalam radian). <code>echo sin(pi() / 2); // 1</code> <code>tan($number)</code> Mengembalikan tangen dari sebuah bilangan (dalam radian). <code>echo tan(pi() / 4); // 1</code> <code>acos($number)</code> Mengembalikan arccosinus (nilai invers kosinus) dari sebuah bilangan. <code>echo acos(0.5); // 1.0472</code> <code>asin($number)</code> Mengembalikan arcsinus (nilai invers sinus) dari sebuah bilangan. <code>echo asin(0.5); // 0.5236</code> <code>atan($number)</code> Mengembalikan arctangen (nilai invers tangen) dari sebuah bilangan. <code>echo atan(1); // 0.7854</code> <code>bindec($binary_string)</code> Mengubah bilangan biner menjadi bilangan desimal. <code>echo bindec('101'); // 5</code> <code>decbin($number)</code> Mengubah bilangan desimal menjadi bilangan biner. <code>echo decbin(5); // 101</code> <code>dechex($number)</code> Mengubah bilangan desimal menjadi bilangan heksadesimal. <code>echo dechex(255); // ff</code> <code>decoct($number)</code> Mengubah bilangan desimal menjadi bilangan oktal. <code>echo decoct(8); // 10</code> <code>hexdec($hex_string)</code> Mengubah bilangan heksadesimal menjadi bilangan desimal. <code>echo hexdec('ff'); // 255</code> <code>octdec($octal_string)</code> Mengubah bilangan oktal menjadi bilangan desimal. <code>echo octdec('10'); // 8</code> <p>Agar lebih memahami penggunaan function di atas, mari kita buat beberapa contoh.</p> <pre><code>&lt;?php\n// Fungsi Matematika\necho \"abs(-100) : \" . abs(-100) . PHP_EOL;\necho \"cos(60) : \" . cos(60) . PHP_EOL;\necho \"bindec(10001111011) : \" . bindec(10001111011) . PHP_EOL;\necho \"ceil(12.123) : \" . ceil(12.123) . PHP_EOL;\necho \"floor(12.123) : \" . floor(12.123) . PHP_EOL;\necho \"round(12.123) : \" . round(12.123) . PHP_EOL;\necho \"deg2rad(90) : \" . deg2rad(90) . PHP_EOL;\necho \"pow(4,2) : \" . pow(4,2) . PHP_EOL;\necho \"sqrt(16) : \" . sqrt(16) . PHP_EOL;\necho \"rand(10,1000) : \" . rand(10,1000) . PHP_EOL;\necho \"max(10,11,17,13) : \" . max(10,11,17,13) . PHP_EOL;\n\n$nilai = [80,90,76,88,56];\necho \"max(\\$nilai) : \" . max($nilai) . PHP_EOL;\n?&gt;\n</code></pre> <p>Perhatian</p> <p>Silahkan teliti dan amati skrip di atas, pahami maksud dan hasil dari setiap baris kodenya. Good Luck \ud83d\ude0a</p>"},{"location":"03/#function-untuk-penanganan-file","title":"Function untuk Penanganan File","text":"<p>PHP dapat digunakan untuk memanipulasi direktori maupun file. Di antara function-function nya adalahs sebagai berikut.</p> Function Keterangan <code>basename(path, suffix)</code> Menghasilkan nama file dari sebuah path. <code>chgrp(file, group)</code> Mengubah file group. <code>chmod(file, mode)</code> Mengubah file mode. <code>chown(file, owner)</code> Mengubah pemilik file. <code>copy(file, file_tujuan)</code> Mencopy file. <code>dirname(path)</code> Menghasilkan nama direktori dari sebuah path. <code>disk_free_space(direktori)</code> Menghasilkan sisa kapasitas penyimpanan sebuah direktori. <code>disc_total_space(direktori)</code> Menghasilkan total kapasitas penyimpanan sebuah direktori. <code>fclose(file)</code> Menutup file yang sedang dibuka. <code>foef(file)</code> Mengecek akhir sebuah file yagn dibuka. <code>fgetc(file)</code> Menghasilkan karakter dari file yang dibuka. <code>fgets(file, panjang)</code> Menghasilkan baris dari sebuah file yagn dibuka. <code>fgetss(file, panjang, tag)</code> Menghasilkan baris dengan menghapus tag HTML dan PHP dari file yang dibuka. <code>file(path, include_path, context)</code> Membaca file ke dalam sebuah array. <code>file_exists(path)</code> Mengecek keberadaan file. <code>file_get_contents(path, include_path, context, awal, panjang_maksimal)</code> Membaca file ke dalam sebuah string. <code>file_put_contents(file, data, mode, context)</code> Menuliskan string ke dalam sebuah file. <code>fileatime(nama_file)</code> Menghasilkan waktu terakhir file diakses. <code>filectime(nama_file)</code> Menghasilkan waktu terakhir fiel diubah. <code>filegroup(nama_file)</code> Menghasilkan ID group sebuah file. <code>filemtime(nama_file)</code> Menghasilkan waktu terakhir file dimodifikasi. <code>fileowner(nama_file)</code> Menghasilkan ID user dari sebuah file. <code>fileperms(nama_file)</code> Menghasilkan permission sebuah file. <code>filesize(nama_file)</code> Menghasilkan ukuran sebuah file. <code>filetype(nama_file)</code> Menghasilkan tipe sebuah file. <code>flock(file, lock, block)</code> Mengunci dan membebaskan file. Lock dapat diisi <code>LOCK_SH</code>, <code>LOCK_EX</code>, <code>LOCK_UN</code>,<code>LOCK_NB</code>. <code>fopen(nama_file, mode, include_path, context)</code> Membuka file atau membuat file jika file yang dibuka tidak ada. <code>fputs(file, string, panjang)</code> Menuliskan sesuatu pada file yang dibuka. <code>fread(file, panjang)</code> Membaca dari file yang dibuka. <code>fseek(file ofset, whence)</code> Melakukan pencarian pada file yang dibuka. <code>Whence</code> dapat diisi <code>SEEK_SET</code>,<code>SEEK_CUR</code>, <code>SEEK_END</code>. <code>fstat(file)</code> Menghasilkan informasi tentang file yang dibuka. <code>ftell(file)</code> Menghasilkan posisi saat ini dari file yang dibuka. <code>fwrite(file, string, length)</code> Menuliskan sesuatu pada file yang dibuka. <code>is_dir(file)</code> Mengecek apakah sebuah file merupakan direktori. <code>is_executable(file)</code> Mengecek apakah sebuah file executabel. <code>is_file(file)</code> Mengecek apakah sebuah file merupakan file biasa. <code>is_link(file)</code> Mengecek apakah sebuah file merupakan link. <code>is_readable(file)</code> Mengecek apakah sebuah file readable. <code>is_uploaded_file(file)</code> Mengecek apakah sebuah file ter-upload. <code>is_writable(file)</code> Mengecek apakah sebuah file writable. <code>mkdir(path, mode, recursive, context)</code> Membuat direktori. <code>move_uploaded_file(file, lokasi_baru)</code> Memindahkan file yang ter-upload ke sebuah direktori. <code>pathinfo(path, option)</code> Menghasilkan informasi sebuah path. <code>realpath(path)</code> Menghasilkan absolute path-name. <code>realpath_cache_get()</code> Menghasilkan entri cache sebuah realpath. <code>realpath_cache_size()</code> Menghasilkan ukuran cache sebuah realpath. <code>rename(nama_lama, nama_baru, context)</code> Mengubah nama file atau direktori. <code>rmdir(direktori, context)</code> Menghapus direktori yang kosong. <code>tmpnam(direktori, prefix)</code> Membuat temporary file dengan nama unik. <code>tmpfile()</code> Membuat file sementara dengan nama unik, setelah skrip selesai, maka file tersebut langsung dihapus <code>unmask(mask)</code> Mengubah permission sebuah file. <code>unlink(nama_file, context)</code> Menghapus file. <p>Agar lebih memahami function di atas, mari kita buat contoh kodenya. Anda tidak perlu menulis baris komentar jika sudah paham maksudnya dan menginginkan kode yang lebih ringkas.</p> <pre><code>&lt;?php\n// Membuka/ membuat file\n$file = fopen(\"halo.txt\",\"w\");\n\n// Menyiapkan teks\n$teks = \"Halo, \\n\";\n\n// Mengisi file\nfwrite($file, $teks);\n\n// Menyiapkan teks\n$teks = \"Saya sedang belajar PHP\\n\";\n\n// Mengisi file\nfwrite($file, $teks);\n\n// Menutup file\nfclose($file);\n\n?&gt;\n</code></pre> <p>Hasil</p> <p>Coba pahami skrip di atas, lalu jalankan, maka akan muncul file <code>halo.txt</code> yang berisi <pre><code>Halo, \nSaya sedang belajar PHP\n</code></pre></p>"},{"location":"04/","title":"Variable Scope","text":"<ul> <li>Di PHP, kita bisa membuat variable dimanapun yang kita mau.</li> <li>Scope variable adalah dibagian mana saja sebuah variable bisa diakses.</li> <li>PHP memiliki tiga jenis variable scope, yaitu:<ul> <li><code>global</code></li> <li><code>local</code></li> <li><code>static</code></li> </ul> </li> </ul>"},{"location":"04/#global-scope","title":"Global Scope","text":"<ul> <li>Variable yang dibuat diluar function memiliki scope global.</li> <li>Variable di scope global hanya bisa diakses dari luar function.</li> <li>Artinya di dalam function, kita tidak bisa mengakses variable di global scope.</li> </ul> <p>Contoh:</p> <pre><code>&lt;?php\n// Global scope\n$nama = \"Reza\";\n\nfunction halo(){\n    echo $nama;\n}\n\nhalo();\n?&gt;\n</code></pre> <p>Error</p> <p>Jika skrip di atas dijalankan, tentu saja mucul pesan berikut, silahkan pahami sendiri maksudnya \ud83d\ude05</p> <p><code>Warning: Undefined variable $nama in C:\\Users\\ASUS\\Documents\\GitHub\\modul-belajar-php-dasar\\sourcecode\\scope\\global.php on line 6</code></p>"},{"location":"04/#local-scope","title":"Local Scope","text":"<ul> <li>Variable yang dibuat di dalam function memiliki scope local.</li> <li>Variable di scope local hanya bisa diakses dari dalam function itu sendiri.</li> <li>Artinya variable tersebut tidak bisa diakses dari luar function ataupun dari function lain.</li> </ul> <p>Contoh:</p> <pre><code>&lt;?php\n// Local scope\nfunction buatUser(){\n    $user = \"Tono\";\n}\n\nbuatUser();\necho $user;\n?&gt;\n</code></pre> <p>Error</p> <p><code>Warning: Undefined variable $user in C:\\Users\\ASUS\\Documents\\GitHub\\modul-belajar-php-dasar\\sourcecode\\scope\\local.php on line 8</code></p> <p>Sejauh ini masih mengalami error yang sama. \ud83e\udd2d</p> <p>Solusi</p> <ul> <li>Jika kita ingin mengakses variable diluar function (global scope) dari dalam function, kita bisa menggunakan kata kunci <code>global</code>.</li> <li>Dengan menggunakan kata kunci <code>global</code>, maka kita bisa mengakses variable yang ada di <code>global</code> scope dari dalam function.</li> </ul> <p>Contoh:</p> <p><pre><code>&lt;?php\n// Menggunakan keyword global\n$nama = \"Jung Kook\";\n\nfunction halo(){\n    global $nama;\n    echo \"Halo $nama\\n\";\n}\n\nhalo();\n?&gt;\n</code></pre> Alhamdulillah, akhirnya berhasil juga. \ud83d\ude0a</p>"},{"location":"04/#static-scope","title":"Static Scope","text":"<ul> <li>Secara default local variable itu siklus hidupnya hanya sebatas function nya dieksekusi.</li> <li>Jika sebuah function selesai dieksekusi, maka siklus hidup local variable nya selesai.</li> <li>PHP memiliki scope yang bernama static.</li> <li>Static scope hanya bisa di set ke local variable.</li> <li>Saat kita membuat sebuah local variable menjadi static, maka siklus hidupnya tidak akan berhenti ketika sebuah function selesai dieksekusi.</li> <li>Artinya jika function tersebut dieksekusi lagi, maka static variable tersebut akan memiliki value dari sebelumnya.</li> </ul> <p>Contoh:</p> <pre><code>&lt;?php\n// Static scope\nfunction antrian(){\n    static $a = 1;\n    echo \"Antrian ke $a\\n\";\n    $a++;\n}\n\nantrian();\nantrian();\nantrian();\n?&gt;\n</code></pre>"},{"location":"04/#superglobal","title":"Superglobal","text":"<p>Variabel superglobal yaitu khusus bawaan PHP yagn dapat diakses dari mana saja, baik dari luar function maupun di dalam function.</p>"},{"location":"04/#variabel-_globals","title":"Variabel $_GLOBALS","text":"<ul> <li>Secara default, ketika kita membuat sebuah variabel maka seberanya PHP akan menyimpannya di dalam memori komputer, tepatnya di variabel <code>$_GLOBALS</code>.</li> <li>Varibal <code>$_GLOBALS</code> adalah variabel array yang berisi variabel-variabel bawaan PHP dan variabel yang kita definisikan.</li> <li>Karena berupa array, maka kita bisa mengambil nilainya dengan skrip <code>$_GLOBALS[nama_variabel]</code>.</li> </ul> <p>Sebagai percobaan awal mari kita bongkar isi dari variabel <code>$_GLOBALS</code>.</p> <pre><code>&lt;?php\nvar_dump($_GLOBALS);\n?&gt;\n</code></pre> <p>Coba jalankan skrip di atas, maka akan ditampilkan array yang isinya banyak sekali, silahkan amati dan teliti maksudnya.</p> <p>Sekarang kita coba buat sebuah variabel, dan coba mengaksesnya dengan variabel <code>$_GLOBALS</code>.</p> <pre><code>&lt;?php\n$nama = \"Kim Jong Unch\";\n$umur = 56;\n\nfunction tambah_umur(){\n    $_GLOBALS['umur']++;\n}\n\necho \"Nama : \" . $_GLOBALS['nama'].PHP_EOL;\ntambah_umur();\necho \"Umur : \" . $_GLOBALS['umur'];\n?&gt;\n</code></pre> <p>Penjelasan</p> <ol> <li>Awalnya kita membuat variabel <code>$nama</code> dan <code>$umur</code></li> <li>Lalu kita membuat function <code>tambah_umur()</code> yang berfungsi mengambil variabal <code>$umur</code> yang diakses dengan variabel <code>$GLOBAL['umur']</code> dan menaikkan nilainya dengan operator <code>++</code>.</li> <li>Terakhir kita tampilkan hasilnya menggunakan <code>echo</code>.</li> </ol>"},{"location":"04/#variabel-_server","title":"Variabel $_SERVER","text":"<ul> <li>Variabel <code>$_SERVER</code> menyediakan informasi tentang header, path dan lokasi skrip.</li> <li>Variabel <code>$_SERVER</code> menyediakan banyak informasi tentang server, rinciannya sebagaimana pada tabel berikut.</li> <li>Namun, untuk membuktikannya, silahkan lakukan perintah <code>var_dump($_SERVER);</code></li> </ul> Variabel Key Keterangan <code>$_SERVER['PHP_SELF']</code> Menghasilkan nama file PHP yang berisi skrip tersebut. <code>$_SERVER['GATEWAY_INTERFACE']</code> Menghasilkan cersi Common Gateway Interface (CGI) dari server. <code>$_SERVER['SERVER_ADDR']</code> Menghasilkan IP address dari host server. <code>$_SERVER['SERVER_NAME']</code> Menghasilkan nama dari host server. <code>$_SERVER['SERVER_SOFTWARE']</code> Menghasilkan nama aplikasi server, misalnya : Apacche/2.2.4 <code>$_SERVER['SERVER_PROTOCOL']</code> Menghasilkan nama dan revisi dari Information Protocol, misalnya HTTP/1.1 <code>$_SERVER['REQUEST_METHOD']</code> Menghasilkan request method yang digunakan pada halaman, apakah GET atau POST. <code>$_SERVER['REQUEST_TIME']</code> Menghasilkan timestamp mulai request. <code>$_SERVER['QUERY_STRING']</code> Menghasilkan query string jika halaman diakses dengan query string. <code>$_SERVER['HTTP_ACCEPT']</code> Menghasilkan Accept header dari request. <code>$_SERVER['HTTP_ACCEPT_CHARSET']</code> Menghasilkan Accept Charset Header dari request. <code>$_SERVER['HTTP_HOST']</code> Menghasilkan host header dari request. <code>$_SERVER['HTTP_REFERER']</code> Menghasilkan URL lengkap dari halaman yang sedang dibuka. <code>$_SERVER['HTTPS']</code> Menghasilkan informasi, apakah skrip diakses melalui protokol HTTPS. <code>$_SERVER['REMOTE_ADDR']</code> Menghasilkan IP address yang digunakan user untuk membuka halaman web. <code>$_SERVER['REMOTE_HOST']</code> Menghasilkan nama host dari user yang membuka halaman web. <code>$_SERVER['REMOTE_PORT']</code> Menghasilkan port yang digunakan oleh mesin untuk berkomunikasi dengan web server. <code>$_SERVER['SCRIPT_FILENAME']</code> Menghasilkan path absolut dari skrip yang sedang dijalankan. <code>$_SERVER['SERVER_PORT']</code> Menghasilkan port yang digunakan oleh web server. <code>$_SERVER['SERVER_SIGNATURE']</code> Menghasilkan versi server dan virtual hostname. <code>$_SERVER['PATH_TRANSLATED']</code> Menghasilkan system base-path dari skrip yang sedang berjalan. <code>$_SERVER['SCRIPT_NAME']</code> Menghasilkan path dari skrip yang sedang berjalan. <code>$_SERVER['SCRIPT_URI']</code> Menghasilkan URI dari halaman yang sedang dibuka. <p>Untuk membuktikan variabel <code>$_SERVER</code> mari kita bongkar isinya </p> <pre><code>&lt;?php\nvar_dump($_SERVER);\n?&gt;\n</code></pre> <p>Karena tidak semua data kita butuhkan, sebagai contoh penggunaan, mari kita coba tampilkan beberapa saja.</p> <p>Peringatan</p> <ul> <li>Karena berkaitan dengan HTTP, maka jalankan script PHP berikut dengan PHP Server Mode.</li> <li>Buka terminal pada Visual Studio Code dan jalankan command <code>php -S localhost:80</code> lalu  Enter.</li> <li>Semisal saya menyimpan file nya dengan nama <code>server02.php</code>, maka buka di browser dan ketikkan pada address bar <code>localhost/server02.php</code>.</li> </ul> <pre><code>&lt;?php\necho $_SERVER['PHP_SELF'] . \"&lt;br&gt;\";\necho $_SERVER['SERVER_NAME'] . \"&lt;br&gt;\";\necho $_SERVER['HTTP_HOST'] . \"&lt;br&gt;\";\necho $_SERVER['HTTP_USER_AGENT'] . \"&lt;br&gt;\";\necho $_SERVER['SCRIPT_NAME'] . \"&lt;br&gt;\";\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Selain variabel superglobal <code>$GLOBAL</code> dan <code>$_SERVER</code>, PHP masih menyediakan variabel yang lain, akan kita bahas sebentar lagi.</li> <li>Setiap variabel superglobal pasti ditulis menggunakan huruf kapital dan biasanya diawali dengan tanda underscore, seperti <code>$_SESSION</code>, <code>$_FILES</code>, <code>$_SESSION</code> dsb.</li> </ul>"},{"location":"05/","title":"Session","text":"<ul> <li>Seperti variabel, session digunakan untuk menyimpan suatu nilai.</li> <li>Bedanya, jika session telah dibuat dalam suatu file, session dapat diakses oleh file lain selama session belum dihapus atau browser belum ditutup.</li> <li>Session biasanya digunakan untuk pembuatan login user.</li> <li>Dengan session, dapat dicek apakah user sudah login atau belum.</li> <li>Session dibuat menggunakan superglobal variabel <code>$_SESSION[]</code>.</li> <li>Sebelum menggunakan session, kita harus menjalankan funnction <code>session_start()</code>.</li> <li>Untuk menghapus session bisa menggunakan fungsi <code>session_destroy()</code>, atau jika browser ditutup, session secara otomatis akan dihapus.</li> </ul> <p>Contoh:</p> <p>File <code>session.php</code></p> <pre><code>&lt;?php\nsession_start();\n$_SESSION['username'] = \"Administrator\";\n$_SESSION['password'] = \"rahasia\";\n\necho \"Session telah dibuat..!\";\necho \"&lt;br&gt;\";\necho \"&lt;a href='session_cek.php'&gt;Cek Session&lt;/a&gt;\";\n?&gt;\n</code></pre> <ul> <li>Jika file tersebut dibuka dari browser, maka akan dibuat sebuah session.</li> <li>Ketika tombol <code>Cek Session</code> diklik, maka kita akan diarahkan ke pada file <code>session_cek.php</code>.</li> <li>Walaupun berbeda file, data session akan bisa terbaca.</li> </ul> <p>Sekarang kita buat file <code>session_cek.php</code></p> <pre><code>&lt;?php\nsession_start();\n\nif(!empty($_SESSION['username']) &amp;&amp; !empty($_SESSION['password'])){\n    echo \"Username : \" . $_SESSION['username'] . \"&lt;br&gt;\";\n    echo \"Password : \" . $_SESSION['password'] . \"&lt;br&gt;\";\n    echo \"&lt;a href='session_hapus.php'&gt;Hapus Session&lt;/a&gt;\";\n}else{\n    echo \"Sesi telah dihapus &lt;br&gt;\";\n    echo \"&lt;a href='session.php'&gt;Buat Session&lt;/a&gt;\";\n}\n?&gt;\n</code></pre> <p>Sekarang, untuk menghapus session, kita buat file <code>session_hapus.php</code></p> <pre><code>&lt;?php\nsession_start();\nsession_destroy();\n\necho \"Session telah dihapus..!\";\necho \"&lt;br&gt;\";\necho \"&lt;a href='session_cek.php'&gt;Cek Session&lt;/a&gt;\";\n?&gt;\n</code></pre> <ul> <li>Dengan menjalankan skrip di atas, maka session akan dihapus.</li> <li>Coba buka lagi dari browser file-file di atas mulai dari <code>session.php</code> dan pahami maksudnya.</li> </ul>"},{"location":"06/","title":"Cookie","text":"<ul> <li>Hampir mirip dengan session, namun data cookie tidak akan terhapus ketika browser ditutup.</li> <li>Data cookie akan terhapus setelah batas waktu yang ditentukan.</li> <li>Cara membuat cookie adalah dengan function <code>setcookie()</code> dengan format <code>setcookie(nama_cookie, nilai, batas_akhir)</code>.</li> <li>Batas akhir cookie dihitung dengan satuan detik.</li> <li>Untuk menampilkan cookie menggunakan variabel superglobal <code>$_COOKIE['nama_cookie']</code>.</li> </ul> <p>Sebagai contoh mari kita buat 2 file yaitu : <code>cookie.php</code> dan <code>cookie_cek.php</code>.</p> <p>File 1 : <code>cookie.php</code></p> <pre><code>&lt;?php\n// Mengatur timezone Indonesia\ndate_default_timezone_set(\"Asia/Jakarta\");\n\n// Membuat batas cookie\n$batas = time()+30;\n\n// Membuat cookie\nsetcookie(\"KunjunganTerakhir\", date('H:i:s'), $batas);\n\n// Menampilkan pesan\necho \"Cookie telah dibuat..!\";\necho \"&lt;br&gt;\";\necho \"Cek cookie sebelum dan setelah 30 detik dari sekarang..!\";\necho \"&lt;br&gt;\";\necho \"&lt;a href='cookie_cek.php'&gt;Cek Cookie&lt;/a&gt;\";\n?&gt;\n</code></pre> <p>Tips</p> <p>Jika kamu paham maksud kodenya, atau jika ingin penulisan yang lebih ringkas, kamu tidak perlu menuliskan beris komentar. \ud83d\ude0a</p> <p>File 2 : <code>cookie_cek.php</code></p> <pre><code>&lt;?php\n\nif(isset($_COOKIE['KunjunganTerakhir'])){\n    echo \"Anda terakhir membuat &lt;b&gt;cookie&lt;/b&gt; \";\n    echo \"pada jam {$_COOKIE['KunjunganTerakhir']}\";\n}else{\n    echo \"Anda terakhir membuat cookie \";\n    echo \"lewat dari 30 detik yang lalu.\";\n}\n</code></pre> <p>Ujii Coba</p> <ul> <li>Sekarang akses file <code>cookie.php</code> dari browser.</li> <li>Lalu klik link <code>Cek Cookie</code> untuk mengecek data cookie.</li> <li>Tunggu 30 detik, lalu re-fresh halaman, maka data cookie sudah hilang, karena kita mengatur batas cookie hanya bertahan selama 30 detik.</li> </ul>"},{"location":"07/","title":"Penanganan Form","text":"<ul> <li>Salah satu fungsi utama PHP adalah memungkinkan adanya interaksi antara aplikasi web dengan user.</li> <li>Media untuk melakukan interaksi ini salah satunya adalah form.</li> <li>Untuk memproses data yang dikirim oleh form ada beberapa variabel superglobal yang sering digunakan.</li> </ul>"},{"location":"07/#variabel-_get","title":"Variabel $_GET","text":"<ul> <li>Variabel <code>$_GET</code> menyimpan array data yang dikirim oleh form dengan method GET melalui URL, atau biasa disebut sebagai Query string.</li> <li>Data yang dikirim akan terlihat pada URL.</li> <li>Penggunaan method GET tidak cocok untuk mengirimkan data yang sensitif, semisal password dan sebagainya.</li> </ul> <p>Contoh: <code>form_get.php</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Form Get&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"\" method=\"get\"&gt;\n        &lt;input type=\"text\" name=\"kata\" id=\"kata\"&gt;\n        &lt;input type=\"submit\" value=\"Cari\"&gt;\n    &lt;/form&gt;\n\n    &lt;?php\n    if(isset($_GET['kata'])){\n        echo \"Anda sedang mencari kata &lt;b&gt;{$_GET['kata']}&lt;/b&gt;\";\n    }\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Uji Coba</p> <ul> <li>Akses skrip di atas dari browser.</li> <li>Masukkan sebuah kata pada kotak pencarian, dan klik tombol  Cari .</li> <li>Akan muncul keterangan di bawah form.</li> <li>Perhatikan juga URL pada address bar.</li> </ul>"},{"location":"07/#variabel-_post","title":"Variabel $_POST","text":"<ul> <li>Variabel <code>$_POST</code> menyimpan array data yang dikirim oleh form dengan method POST melalui HTTP POST.</li> <li>Data yang dikirim tidak akan tampak pada URL, sehingga lebih aman daripada <code>$_GET</code>.</li> </ul> <p>Contoh: form_post.php</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Form POST&lt;/title&gt;\n    &lt;style&gt;\n        body{\n            font-family:arial;\n            text-align:center;\n        }\n        input{\n            margin:10px;\n            padding:10px;\n            filter:drop-shadow(5px 5px gray);\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"\" method=\"post\"&gt;\n        &lt;h2&gt;Login&lt;/h2&gt;\n        &lt;input type=\"text\" name=\"username\" placeholder=\"Username\"&gt;\n        &lt;br&gt;\n        &lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;\n        &lt;br&gt;\n        &lt;input type=\"reset\" value=\"Batal\"&gt;\n        &lt;input type=\"submit\" value=\"Login\"&gt;\n        &lt;br&gt;\n    &lt;/form&gt;\n    &lt;?php\n        if($_SERVER[\"REQUEST_METHOD\"]==\"POST\"){\n            echo \"Username : &lt;b&gt;$_POST[username]&lt;/b&gt;\";\n            echo \"&lt;br&gt;\";\n            echo \"Password : &lt;b&gt;$_POST[password]&lt;/b&gt;\";\n        }\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Uji Coba</p> <ul> <li>Akses skrip di atas dari browser.</li> <li>Masukkan username dan password pada form dan klik tombol  Login .</li> <li>Akan muncul keterangan di bawah form.</li> <li>Tombol  Batal  digunakan untuk menghapus input user.</li> </ul>"},{"location":"07/#variabel-_files","title":"Variabel $_FILES","text":"<ul> <li>Variabel <code>$_FILES</code> hanya menyimpan data yang dikirim dari input dengan tipe file.</li> <li>Biasa digunakan untuk proses upload file.</li> <li>Agar file dapat terupload, pada tag <code>&lt;form&gt;</code> harus ditambah atribut <code>enctype=\"multipart/form-data\"</code>.</li> </ul> <p>Contoh : form_files.php</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Form Upload&lt;/title&gt;\n    &lt;style&gt;\n        body{\n            font-family:arial;\n            text-align:center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Upload File&lt;/h2&gt;\n    &lt;form action=\"\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n        &lt;input type=\"file\" name=\"foto\" id=\"foto\"&gt;\n        &lt;input type=\"submit\" value=\"Upload\"&gt;\n    &lt;/form&gt;\n\n    &lt;?php\n        if($_SERVER[\"REQUEST_METHOD\"]==\"POST\"){\n            $namafile = $_FILES['foto']['name'];\n            $lokasifile = $_FILES['foto']['tmp_name'];\n\n            if($namafile != \"\"){\n                move_uploaded_file($lokasifile,\"file/\".$namafile);\n                echo \"&lt;br&gt;\";\n                echo \"&lt;img src='file/$namafile' width='50%'&gt;\";\n            }\n        }\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Uji Coba</p> <ul> <li>Sebelum dicoba, buat 1 folder sejajar dengan skrip di atas dengan nama <code>file</code>.</li> <li>Akses skrip di atas dari browser.</li> <li>Pilih 1 file dari komputer dengan klik tombol  Chose file , lalu klik  Upload .</li> <li>Setelah terupload, maka file akan disimpan di dalam folder <code>file</code> yang baru saja kita buat.</li> <li>Browser akan refresh dan gambar langsung ditampilkan di browser.</li> <li>Respect \ud83e\udee1</li> </ul>"},{"location":"08/","title":"Database","text":""},{"location":"08/#penanganan-database","title":"Penanganan Database","text":"<ul> <li>Penanganan database merupakan tujuan utama dalam penggunaan PHP.</li> <li>Dengan database, data yang diproses oleh PHP dapat disimpan dan dapat digunakan setiap saat.</li> <li>Database yang paling umum digunakan dengan bahasa PHP adalah MySQL, MariaDB dan PostgreSQL.</li> </ul>"},{"location":"08/#database-functions","title":"Database Functions","text":"<p>Berikut daftar function bawaan PHP yang bisa kita gunakan untuk berkomunikasi dengan database.</p> Function Keterangan <code>mysqli_affected_row(koneksi)</code> Menghasilkan jumlah baris yang terpengaruh oleh operasi MySQL sebelumnya. <code>mysqli_autocommit(koneksi, mode)</code> Mengeset modifikasi database langsung diproses atau tidak. <code>mysqli_change_user(koneksi, username, password, dbname)</code> Mengubah user pada koneksi database. <code>mysqli_character_set_name(koneksi)</code> Menghasilkan karakter default pada koneksi database. <code>mysqli_close(koneksi)</code> Menutup koneksi database. <code>mysqli_commit(koneksi)</code> Memproses transaksi database saat ini. <code>mysqli_connect_errorno()</code> Menghasilkan kode error dari koneksi terakhir. <code>mysqli_connect_error()</code> Menghasilkan deskripsi error dari koneksi terakhir. <code>mysqli_connect(host, username, password, dbname, port, socket)</code> Membuka koneksi baru ke MySQL server. <code>mysqli_data_seek(result, offset)</code> Menuju baris tertentu dari data yang dihasilkan. <code>myqsli_debug(message)</code> Debug operasi database. <code>mysqli_dump_debug_info(koneksi)</code> Menghasilkan info debug ke log. <code>mysqli_errno(koneksi)</code> Menghasilkan kode error terakhir dari beberapa operasi database. <code>mysqli_error_list(koneksi)</code> Menghasilkan daftar error dari beberapa operasi database. <code>mysqli_error(koneksi)</code> Menghasilkan deskripsi error terakhir dari beberapa operasi database. <code>mysqli_fetch_all(result, result_type)</code> Menghasilkan array asosiatif, array numerik atau keduanya dari semua hasil operasi database. <code>result_type</code> dapat diisi <code>MYSQLI_ASSOC</code>,<code>MYSQLI_NUM</code>,<code>MYSQLI_BOTH</code>. <code>mysqli_fetch_array(result, result_type)</code> Menghasilkan array asosiatif, array numerik atau keduanya dari hasil operasi database. <code>mysqli_fetch_assoc(result)</code> Menghasilkan array asosiatif dari hasil operasi dataabse. <code>mysqli_fetch_field_direct(result, field_number)</code> Menghasilkan meta-data sebuah field dari hasil operasi database, sebagai sebuah objek. <code>mysqli_fetch_field(result)</code> Menghasilkan field berikutnya dari hasil operasi database, sebagai sebuah objek. <code>mysqli_fetch_fields(result)</code> Menghasilkan array objek yang merepresentasikan field dari hasil operasi database. <code>mysqli_fetch_lengths(result)</code> Menghasilkan jumlah kolom dari baris saat ini. <code>mysqli_fetch_object(result, classname, parameter)</code> Menghasilkan baris dari hasil operasi database sebagai objek. <code>mysqli_fetch_row(result)</code> Menghasilkan array numerik dari satu baris hasil operasi database. <code>mysqli_field_count(koneksi)</code> Menghasilkan jumlah kolom dari query sebelumnya. <code>mysqli_field_seek(result, field_number)</code> Menuju field tertentu. <code>mysqli_field_tell(result)</code> Menghasilkan posisi field saat ini. <code>mysqli_free_result(result)</code> Mengosongkan data dari hasil operasi database. <code>mysqli_get_client_info(koneksi)</code> Menghasilkan versi client library MySQL. <code>mysqli_get_connection_stats(koneksi)</code> Menghasilkan statistik mengenai koneksi client. <code>mysqli_get_host_info(koneksi)</code> Menghasilkan nama host server MySQL dan tipe koneksi. <code>mysqli_get_proto_info(koneksi)</code> Menghasilkan versi protokol MySQL. <code>mysqli_get_server_info(koneksi)</code> Menghasilkan versi server MySQL. <code>mysqli_get_server_version(koneksi)</code> Menghasilkan versi server MySQL sebagai integer. <code>mysqli_info(koneksi)</code> Menghasilkan informasi tentang query yang dieksekusi baru-baru ini. <code>mysqli_init()</code> Menginisialisasi MySQLi dan menghasilkan resource untuk digunakan dengan <code>mysqli_real_connection()</code>. <code>mysqli_insert_id(koneksi)</code> Menghasilkan id yang dihasilkan otomatis dari query terakhir. <code>mysqli_more_results(koneksi)</code> Mengecek apakah ada hasil dari beberapa query. <code>mysqli_multi_query(koneksi, query)</code> Memproses beberapa query. <code>mysqli_next_result(koneksi)</code> Mempersiapkan hasil berikutnya dari <code>mysqli_multi_query()</code>. <code>mysqli_num_fields(result)</code> Menghasilkan jumlah field dari hasil operasi database. <code>mysqli_num_rows(result)</code> Menghasilkan jumlah baris dari hasil operasi database. <code>mysqli_options(koneksi, option, value)</code> Menambahkan pengaturan pada koneksi database. <code>mysqli_ping(koneksi)</code> Mengetes koneksi server atau mencoba koneksi ulang jika koneksi bermasalah. <code>mysqli_query(koneksi, query, resultmode)</code> Memproses query ke database. <code>resultmode</code> dapat diisi <code>MYSQLI_USE_RESULT</code>, <code>MYSQLI_STORE_RESULT</code>. <code>mysqli_real_connect(koneksi, host, username, password, dbname, port, socket, flag)</code> Membuka koneksi baru ke MySQL server. <code>mysqli_real_escape_string(koneksi, escapestring)</code> Meloloskan karakter khusus pada string untuk digunakan pada perintah SQL. <code>mysqli_select_db(koneksi, dbname)</code> Mengubah database yang terkoneksi. <p>Untuk dapat menggunakan function-function di atas, pastikan kamu telah menginstall MySQL/ MariaDB server dan memiliki database di dalamnya.</p>"},{"location":"08/#praktik-koneksi-database","title":"Praktik Koneksi Database","text":"<p>Agar dapat lebih memahami fungsi-fungsi database pada bahasa pemrograman PHP, mari kita melakukan uji coba.</p>"},{"location":"08/#instalasi-server","title":"Instalasi Server","text":"<p>Perhatian</p> <p>Jika anda sudah mempelajari Tutorial Database MySQL dari panduan yang telah saya buat, maka anda bisa melewai langkah ini.</p> <p>Sebelum mengakses database menggunakan PHP, silahkan install dulu salah satu server database berikut.</p> <ul> <li>MySQL  \u2b07\ufe0f Link Download</li> <li>MariaDB  \u2b07\ufe0f Link Download</li> </ul> <p>Saya sendiri sebenarnya lebih suka MariaDB, karena aplikasinya opensource dan saat ini lebih aktif dikembangkan daripada MySQL.</p>"},{"location":"08/#konfigurasi","title":"Konfigurasi","text":""},{"location":"08/#setting-ekstensi-mysqli","title":"Setting Ekstensi <code>mysqli</code>","text":"<p>Perhatian</p> <p>Jika anda praktik menggunakan paket aplikasi XAMPP, Laragon, AppServ, Uwamp, USBWebserver atau yang lain, anda bisa melewati langkah ini.</p> <p>Karena sejak awal saya praktik menjakankan file php menggunkanan command promt/ terminal pada aplikasi Visual Studio Code dengan memanfaatkan file binary <code>php.exe</code>, maka jika kita akan bekerja dengan database MySQL/ MariaDB kita perlu mengaktifkan ekstensi <code>mysqli</code>. Berikut langkah-langkahnya.</p> <ol> <li>Buka file eksporer dan masuk ke direktori file binary php, saya asumsikan di <code>C:\\php</code></li> <li>Cari file <code>php.ini</code>. Jika file <code>php.ini</code> tidak ada, tentu ada file bernama <code>php.ini-development</code>. Maka copy-paste file tersebut dan rename menjadi <code>php.ini</code></li> <li>Buka file <code>php.ini</code> menggunakan Visual Studio Code, atau sebenarnya Notepad saja cukup.</li> <li>Cari baris berikut    <pre><code> ; Directory in which the loadable extensions (modules) reside.\n ; https://php.net/extension-dir\n ;extension_dir = \"./\"\n ; On windows:\n ;extension_dir = \"ext\"\n</code></pre></li> <li>Aktifkan pengaturan folder extension dengan menghapus tanda <code>;</code> di depan <code>extension_dir</code>, kurang lebihnya menjadi seperti ini.     <pre><code>; Directory in which the loadable extensions (modules) reside.\n; https://php.net/extension-dir\n;extension_dir = \"./\"\n; On windows:\nextension_dir = \"ext\"\n</code></pre></li> <li>Selanjutnya cari baris berikut     <pre><code>;extension=mysqli\n</code></pre></li> <li>Aktifkan ekstensi <code>mysqli</code> dengan menghapus tanda <code>;</code> menjadi     <pre><code>extension=mysqli\n</code></pre></li> </ol>"},{"location":"08/#membuat-sample-database","title":"Membuat Sample Database","text":"<ul> <li>Karena kita akan memanipulasi database, mari kita buat contoh databasenya.</li> <li>Pastikan service <code>MariaDB</code> / <code>MySQL</code> dalam kondisi running.</li> <li>Buka aplikasi HeidiSQL, lalu jalankan query berikut untuk membuat database, tabel beserta sample datanya.   <pre><code>-- membuat database sekolah\nCREATE DATABASE sekolah;\n\n-- mengaktifkan database\nUSE sekolah;\n\n-- membuat tabel\nCREATE table siswa(\nid INT AUTO_INCREMENT PRIMARY KEY,\nnama VARCHAR(100) NOT NULL,\nkelas INT(2) NOT NULL,\njurusan VARCHAR(4) NOT NULL\n);\n\n-- menambah sample data\nINSERT INTO siswa\n(nama, kelas, jurusan) VALUES\n(\"Dita Leni Ravia\", 11, \"PPLG\" );\n</code></pre></li> </ul> <p>Catatan</p> <p>Anda tidak perlu menulis query di atas secara manual, copy saja dan paste ke tab <code>query</code> yang ada di aplikasi HeidiSQL dan jalankan dengan menekan tombol F9.</p>"},{"location":"08/#file-configphp","title":"File <code>config.php</code>","text":"<ul> <li>Setelah berhasil mengaktifkan ekstensi <code>mysqli</code> selanjutnya kita buat folder baru untuk menyimpan skrip percobaan CRUD database MySQL dengan PHP.</li> <li>Misal, buat folder <code>crud</code>, lalu buat file-file php di dalamnya (sementara kosongan saja) dengan struktur berikut.     <pre><code>crud\n\u251c\u2500 config.php\n\u251c\u2500 edit.php\n\u251c\u2500 hapus.php\n\u251c\u2500 index.php\n\u2514\u2500 tambah.php\n</code></pre></li> <li>Ketikkan skrip berikut ke dalam file <code>config.php</code> <pre><code>  &lt;?php\n  // Membuat konfigurasi database\n  $host = \"localhost\";\n  $user = \"root\";\n  $pass = \"\";\n  $db   = \"sekolah\";\n\n  // Membuat handle\n  $koneksi = mysqli_connect($host, $user, $pass, $db);\n\n  // Melakukan pengecekan koneksi\n  if(!$koneksi){\n      die(\"Koneksi gagal: \" . mysqli_connect_error());\n  }\n  ?&gt;\n</code></pre></li> </ul> <p>Uji Coba</p> <ul> <li>Mari kita uji coba koneksi ke database dengan menjalankan perintah <code>php -S localhost:80</code> di terminal, dan jangan ditutup.</li> <li>Buka browser dan ketikkan <code>localhost/config.php</code></li> <li>Jika halaman kosong, itu tandanya skrip php berjalan lancar, bisa tersambung dengan database.</li> <li>Namun sebaliknya, jika muncul pesan error, berarti ada yang bermasalah.</li> <li>Cek lagi pengaturan <code>$password</code>, <code>$database</code>, <code>$koneksi</code> serta skrip dalam blok <code>if()</code></li> <li>Lalu jalankan ulang.</li> </ul>"},{"location":"08/#menampilkan-data-read","title":"Menampilkan Data (READ)","text":"<p>Ketikkan skrip berikut ke dalam file <code>index.php</code>, file inilah yang secara default akan diakses jika kita mengetikkan <code>localhost</code> pada browser.</p> <pre><code>&lt;title&gt;Data Siswa&lt;/title&gt;\n&lt;style&gt;\n    table{\n        border-collapse:collapse;\n    }\n    th, td{\n        border: 1px solid black;\n        padding:10px;\n        text-align:center;\n    }\n    th{\n        background:#ccc;\n    }\n    a{\n        text-decoration:none;\n    }\n&lt;/style&gt;\n\n&lt;h2&gt;Data Siswa&lt;/h2&gt;\n&lt;p&gt;&lt;a href=\"tambah.php\"&gt; Tambah Siswa &lt;/a&gt;&lt;/p&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;th&gt;No&lt;/th&gt;\n        &lt;th&gt;Nama&lt;/th&gt;\n        &lt;th&gt;Kelas&lt;/th&gt;\n        &lt;th&gt;Jurusan&lt;/th&gt;\n        &lt;th&gt;Aksi&lt;/th&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n&lt;?php\ninclude \"config.php\";\n$query = \"SELECT * FROM siswa\";\n$result = mysqli_query($koneksi, $query);\n\n$no=1;\nwhile($data = mysqli_fetch_assoc($result)){\n?&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;?=$no?&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;?=$data['nama']?&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;?=$data['kelas']?&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;?=$data['jurusan']?&gt;&lt;/td&gt;\n            &lt;td&gt;\n                &lt;a href=\"edit.php?id=&lt;?=$data['id']?&gt;\"&gt; Edit &lt;/a&gt; | \n                &lt;a href=\"hapus.php?id=&lt;?=$data['id']?&gt;\"&gt; Hapus &lt;/a&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n&lt;?php\n$no++;\n}\n?&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Uji Coba</p> <ul> <li>File tersebut berisi campuran skrip HTML, CSS dan PHP.</li> <li>Kode HTML dan CSS pada skrip berikut saya buat seminimal mungkin, dan tidak memenuhi kaidah penulisan yang ideal, namun secara fungsi sudah cukup.</li> <li>Pahami cara menampilkan data dari database dengan blok perulangan <code>while</code>, lalu buka <code>localhost</code> pada web browser.</li> </ul>"},{"location":"08/#menambah-data-create","title":"Menambah Data (CREATE)","text":""},{"location":"08/#memperbaharui-data-update","title":"Memperbaharui Data (UPDATE)","text":""},{"location":"08/#menghapus-data-delete","title":"Menghapus Data (DELETE)","text":""},{"location":"09/","title":"Praktik Aplikasi","text":"<p>Alhamdulillah...</p> <p>Sampai di sini kita sudah menyelesaikan materi pemgrograman PHP tingkat dasar. Tentu ini baru permulaan, masih banyak hal lain tentang PHP yang belum dibahas pada panduan ini.</p> <p>Namun agar lebih puas dan lebih paham tentang penggunaan bahasa pemrograman PHP dalam pembuatan aplikasi, mari kita buat contoh project sederhana. Aplikasi ini berjudul Aplikasi Manajemen Pegawai, disingkat dengan APG.</p> <p>Ini akan menggabungkan teknologi yang sudah kita pelajari sebelumnya, yaitu: HTML, CSS, PHP dan MySQL.</p> <p>Untuk tutorial selengkapnya silahkan ikuti panduan pada link berikut.</p> <p>Tutorial APG</p>"},{"location":"09/#respect","title":"Respect \ud83e\udee1","text":""},{"location":"end/","title":"Penutup","text":"<p>Penutup</p> <p>Terima kasih telah menggunakan panduan belajar dasar-dasar bahasa pemrograman PHP ini. Saya berharap panduan ini dapat memberikan manfaat nyata dalam memahami dan menguasai dasar Bahasa Pemrograman PHP, baik untuk kebutuhan belajar, mengajar, maupun pengembangan profesional.</p> <p>Jika ada kekurangan dalam penyusunan panduan ini, saya dengan rendah hati menerima saran dan kritik membangun agar panduan ini bisa terus diperbaiki dan dikembangkan.</p> <p>Mari bersama-sama menjadikan ilmu yang kita pelajari sebagai bekal untuk kebaikan dan kemajuan. Saya percaya, dengan berbagi ilmu, kita tidak hanya membantu sesama, tetapi juga mendekatkan diri pada keberkahan ilmu itu sendiri.</p> <p>Selamat belajar, dan semoga sukses selalu menyertai langkah Anda!</p> <p>Hormat kami,</p> <p>Ipnu Masyaid</p> <p>Beliin Kopi  </p>"}]}