{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Selamat Datang","text":""},{"location":"#belajar-php-dasar","title":"Belajar PHP Dasar","text":"<p>Mulai Belajar </p> <p>Beliin Kopi  </p>"},{"location":"01/","title":"Mengenal PHP","text":""},{"location":"01/#pengertian-dan-aplikasi-yang-diperlukan","title":"Pengertian dan Aplikasi yang Diperlukan","text":"<ul> <li>PHP merupakan singkatan dari PHP Hypertext Preprocessor, yaitu bahasa pemrograman web yang dapat disisipkan dalam skrip HTML dan bekerja di sisi server.</li> <li>Tujuannya adalah untuk membantu para developer dalam membuat web dinamis dengan cepat.</li> <li>Agar dapat menjalankan PHP, kita perlu menyediakan perangkat lunak berikut:</li> <li>Web Server (Apache, IIS, Nginx),</li> <li>PHP Server,</li> <li>Database Server (MySQL, MariaDB, MongoDB, dsb)</li> <li>Aplikasi di atas tidak perlu diinstall satu per satu, karena biasanya telah tersedia paket aplikasi yang sudah mencakup semuanya, seperti XAMPP, Laragon, AppServ, USBWebserver, Uwamp, dsb.</li> <li>Jika menggunakan XAMPP, maka skrip PHP ditulis di dalam folder htdocs, namun jika menggunakan Appserv ataupun laragon, maka skrip PHP disimpan di dalam folder www.</li> </ul>"},{"location":"01/#fungsi-php","title":"Fungsi PHP","text":"<p>Fungsi PHP dalam pemrograman web di antaranya sebagai berikut:</p> <ul> <li>Menghasilkan halaman dinamis pada website.</li> <li>Membuat, membuka, menulis, membaca, menghapus dan menutup file pada server.</li> <li>Memproses data yang dikirim dari form.</li> <li>Mengirim dan mengakses cookie.</li> <li>Modifikasi data pada database.</li> <li>Mengontrol akses user.</li> <li>Mengenkripsi data.</li> </ul>"},{"location":"01/#penulisan-sintaks-php","title":"Penulisan Sintaks PHP","text":"<ul> <li>Skrip PHP dituliskan di antara tanda pembuka <code>&lt;?php</code> dan penutup <code>?&gt;</code>.</li> <li>Satu file PHP dapat berisi full skrip PHP atau dapat disisipkan di antara skrip lain seperti HTML, CSS maupun Javascript.</li> <li>File yang berisi skrip PHP wajib disimpan dengan ekstensi .php.</li> <li>Jika disimpan dengan ekstensi HTML ataupun di sembarang tempat, maka skrip PHP tidak akan diakses sebagaimana mestinya.</li> <li>Setiap baris skrip PHP harus diakhiri dengan tanda semicolon <code>;</code>, jika tidak, maka akan menampilkan pesan error</li> </ul> <p>Contoh penulisan skrip PHP <pre><code>&lt;?php\necho \"Halo Kamu\";\n?&gt;\n</code></pre></p>"},{"location":"01/#menjalankan-file-php","title":"Menjalankan File PHP","text":"<p>Menjalankan skrip PHP tidak sama seperti membuka file HTML yang tinggal didobel klik terbuka begitu saja. Setidaknya ada 3 cara yang bisa dilakukan untuk menjalankan skrip PHP.</p> <ol> <li> <p>Dengan Command Prompt</p> <p>Yaitu dengan memanggil file php dari aplikasi terminal ataupun command prompt. Contohnya, jika saya punya file <code>halo.php</code> saya bisa mengetikkan <code>php halo.php</code> pada command promt, maka skrip akan dijalankan dan hasilnya langsung muncul di command promt. Ini cocok jika digunakan untuk sekedar belajar ataupun membuat aplikasi php berbasis comamnd line.</p> </li> <li> <p>Dengan Web Server</p> <p>Yaitu dengan menginstall paket aplikasi XAMPP, Laragon, Appserv atau yang lainnya, lalu menyimpan file php pada direktori servernya, semisal pada folder htdocs ataupun www.</p> </li> <li> <p>Dengan PHP Server</p> <p>Ini adalah opsi yang ringan, alih-alih menginstall aplikasi XAMPP dan semacamnya yang ukurannya besar, kita cukup memanfaatkan file binary PHP. karena PHP sendiri sebenarnya bisa menjalankan web server.</p> <p>Ini cocok dilakukan jika kita ingin menampilkan pemrosesan skrip PHP pada web browser namun belum berhubungan dengan databse.</p> <p>Namun jika suatu saat kita harus melakukan manipulasi database, kita perlu menginstall aplikasi database server semacam MariaDB ataupun MySQL secara terpisah.</p> <p>Cara menjalankan PHP Web Server adalah dengan membuka command prompt, lalu ketikkan perintah</p> </li> </ol> <pre><code>php -S localhost:80\n</code></pre> <p>atau semisal saya menyimpan file skrip php di dalam folder <code>web</code> maka perintahnya adalah</p> <pre><code>php -S localhost:80 -t web\n</code></pre>"},{"location":"01/#skrip-html-dan-php","title":"Skrip HTML dan PHP","text":"<ul> <li>Untuk menampilkan skrip HTML ke browser, kita bisa menggunakan perintah <code>print</code> atau <code>echo</code>, namun yang lebih sering digunakan adalah <code>echo</code></li> <li>Perintah <code>echo</code> bisa ditulis tanpa kurung, atau dengan kurung seperti ini <code>echo()</code></li> <li>Teks yang ingin ditampilkan, baik berupa skrip HTML maupun teks biasa harus diapit dengan tanda single-quote <code>'</code> ataupun double-qoute <code>\"</code>.</li> </ul> <p>Warning</p> <ul> <li>Jangan menuliskan petik ganda <code>\"</code> di dalam teks, jika menggunakan perintah <code>echo</code> atau <code>print</code> dengan petik ganda, begitu juga dengan petik tunggak <code>'</code>.</li> <li>Jika terpaksa harus menuliskan petik, maka berikan tanda back slash <code>\\</code> sebagai escape-character sebelum tanda petik.</li> <li>Segabai tanda petik ganda, dapat menggunakan petik tunggal <code>'</code>, jika menggunakan <code>echo</code> atau <code>print</code> dengan petik ganda, begitu juga sebaliknya.</li> </ul> <p>Mari kita buat contoh skrip dengan perintah <code>echo</code></p> <pre><code>&lt;?php\necho \"&lt;h2&gt;PHP itu mudah&lt;/h2&gt;\";\necho (\"Saya senang belajar \\\"PHP\\\" &lt;br&gt;\");\n\nprint 'Jika saya terus belajar,';\nprint ('saya pasti bisa menguasai \"PHP\"');\n?&gt;\n</code></pre>"},{"location":"01/#komentar","title":"Komentar","text":"<ul> <li>Kita akan biasa menuliskan keterangan sebagai penanda skrip php kita, hal ini bisa dilakukan dengan menambahkan baris komentar.</li> <li>Jika komentar terdiri dari 1 baris, komentar bisa diawali dengan tanda <code>//</code> atau <code>#</code></li> <li>Jika komentar terdiri lebih dari satu baris, maka diawali dengan tanda <code>/*</code> dan diakhiri dengan tanda <code>*/</code>.</li> <li>Pada kebanyakan code editor, shortcut untuk membuat komentar adalah tombol CTRL+/.</li> </ul> <p>Contoh membuat komentar</p> <pre><code>&lt;?php\n# ini adalah komentar\n\n// ini juga komentar\n\n/*\n* ini juga komentar\n* tapi lebih dari satu baris\n*/\n?&gt;\n</code></pre>"},{"location":"02/","title":"Dasar-dasar PHP","text":""},{"location":"02/#variabel","title":"Variabel","text":"<ul> <li>Variabel digunakan untuk menyimpan data berupa teks, angka dan sebagainya yang nilainya dapat diubah-ubah.</li> <li>Nama variabel bisa apa saja asal mengikuti aturan berikut:</li> <li>Nama variabel hanya boleh mengandung huruf, angka dan underscore.</li> <li>Nama variabel yang terdiri lebih dari satu kata dapat dipisahkan dengan underscore.</li> <li>Nama variabel tidak boleh menggunakan kata yang merupakan bagian dari skrip PHP.</li> <li>Penulisan nama variabel harus diawali dengan tanda dolar <code>$</code>.</li> <li>Variabel bersifat case-sensitive, sehingga huruf besar dan huruf kecil dibedakan.</li> </ul> <p>Contoh membuat variabel. Ketikkan kode berikut dan jalankan atau buka di dalam browser.</p> <pre><code>&lt;?php\n$kata = \"Semangat pagi kawan..!\";\necho $kata;\n?&gt;\n</code></pre>"},{"location":"02/#tipe-data","title":"Tipe Data","text":"<p>Variabel pada PHP dapat menyimpan berbagai macam tipe data, di antaranya:</p> <ul> <li>String, yaitu teks. Contoh: \"Selamat Pagi\" atau \"123\"</li> <li>Integer, yaitu angka non-desimal. Contoh: 1, 100, -400</li> <li>Float, yaitu tipe data angka desimal. Contoh: 23.5</li> <li>Boolean, tipe data yang hanya bernilai <code>true</code> atau <code>false</code> saja</li> <li>Array, yaitu tipe data yang menyimpan banyak nilai dalam satu variabel</li> <li>Object, yaitu tipe data yang menyimpan data beserta informasi bagaimana data diproses</li> <li>Null, yaitu tipe data yang hanya bernilai <code>NULL</code></li> </ul> <p>Contoh: <pre><code>&lt;?php\n$nama = \"Joko\";\n$umur = 17;\n\nvar_dump($nama);\nvar_dump($umur);\n?&gt;\n</code></pre></p>"},{"location":"02/#konstanta","title":"Konstanta","text":"<ul> <li>Konstanta digunakan untuk menyimpan nilai sederhana.</li> <li>Sekali didefinisikan/ dibuat, nilai konstanta tidak dapat dirubah, jika dirubah/ diisi ulang maka akan error.</li> <li>Penulisan nama konstanta sama dengan variabel, namun tidak menggunakan tanda <code>$</code>.</li> <li>Best Practice penulisan nama konstanta adalah dengan huruf kapital.</li> </ul> <p>Contoh membuat konstanta</p> <pre><code>&lt;?php\ndefine(\"APP\",\"Aplikasi Siswa\");\ndefine(\"VERSION\",\"1.0\");\n\necho APP . \" Versi \" . VERSION;\n?&gt;\n</code></pre>"},{"location":"02/#operator","title":"Operator","text":"<ul> <li>Setiap bahasa pemrograman pasti memiliki operator.</li> <li>Operator digunakan untuk melakukan operasi terhadap satu atau lebih data, atau variabel, sehingga menghasilkan data baru</li> </ul>"},{"location":"02/#operator-aritmatika","title":"Operator Aritmatika","text":"<p>Operator aritmatika merupakan operator untuk melakukan perhitungan aritmatika.</p> Operator Fungsi + Penjumlahan - Pengurangan * Perkalian / Pembagian % Modulus/ Sisa hasil bagi <p>Contoh</p> <pre><code>&lt;?php\n$x = 5;\n$y = 2;\n\necho \"$x + $y = \" . $x + $y . \"&lt;br&gt;\";\necho \"$x - $y = \" . $x - $y . \"&lt;br&gt;\";\necho \"$x * $y = \" . $x * $y . \"&lt;br&gt;\";\necho \"$x / $y = \" . $x / $y . \"&lt;br&gt;\";\necho \"$x % $y = \" . $x % $y . \"&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"02/#operator-perbandingan","title":"Operator Perbandingan","text":"<p>Digunakan untuk membandingkan 2 nilai atau variabel, hasilnya adalah true atau false.</p> Operator Arti == Sama dengan === Identik-sama dengan != atau &lt;&gt; Tidak sama dengan !== Tidak identik &gt; Lebih besar &lt; Lebih kecil &lt;= Lebih kecil atau sama dengan &gt;= Lebih besar atau sama dengan <p>Contoh:</p> <pre><code>&lt;?php\n$x = \"5\";\n$y = 5;\n\nvar_dump($x == $y);\nvar_dump($x === $y);\nvar_dump($x != $y);\nvar_dump($x !== $y);\nvar_dump($x &gt; $y);\nvar_dump($x &lt; $y);\nvar_dump($x &gt;= $y);\nvar_dump($x &lt;= $y);\n?&gt;\n</code></pre>"},{"location":"02/#operator-logika","title":"Operator Logika","text":"<p>Operator logika digunakan untuk menggabungkan dua pernyataan atau lebih, hasilnya true atau false.</p> Operator Arti <code>and</code> atau <code>&amp;&amp;</code> Benar jika kedua pernyataan benar <code>or</code> atau <code>\\|\\|</code> Benar jika salah satu atau keduanya bernilai benar <code>xor</code> Benar jika salah satu pernyataan bernilai benar, tetapi tidak keduanya <code>!</code> Benar jika pernyataanya salah"},{"location":"02/#operator-increment-dan-decrement","title":"Operator Increment dan Decrement","text":"<p>Operator ini digunakan untuk menambahkan atau mengurangi nilai variabel.</p> Operator Nama Keterangan ++$x Pre-increment Menambahkan variabel $x dengan 1, lalu mengembalikan nilai $x $x++ Post-increment Mengembalikan variabel $x, kemudian menambahkan nilai $x dengan 1 --$x Pre-decrement Mengurangi variabel $x dengan 1, lalu mengembalikan nilai $x $x-- Post-decrement Mengembalikan variabel $x, kemudian mengurangi dengan 1"},{"location":"02/#operator-assigment","title":"Operator Assigment","text":"<p>Operator ini digunakan untuk menentukan atau mengubah nilai suatu variabel numerik.</p> Assigment Sama dengan Keterangan $x = $y $x = $y Nilai x sama dengan nilai y $x += $y $x = $x + $y Nilai x ditambahkan dengan nilai y $x -= $y $x = $x - $y Nilai x dikurangi dengan nilai y $x *= $y $x = $x * $y Nilai x dikalikan dengan nilai y $x /= $y $x = $x / $y Nilai x dibagi dengan nilai y $x %= $y $x = $x % $y Nilai x modulus dengan nilai y"},{"location":"02/#operator-string","title":"Operator String","text":"<p>Operator ini digunakan untuk menggabungkan tipe data string.</p> Operator Contoh <code>.</code> <code>$kata = \"Saya sedang\".\"belajar PHP\";</code> <code>.=</code> <code>$kata .= \"dengan Semangat\";</code>"},{"location":"02/#operator-kondisi","title":"Operator Kondisi","text":"<ul> <li>Operator ini digunakan untuk memberikan nilai pada suatu variabel sesuai kondisi yang ditentukan.</li> <li>Jika kondisi true maka akan diberi nilai dengan nilai sebelah kiri tanda <code>:</code></li> <li>Jika kondisi false maka akan diberi nilai dengan nilai sebelah kanan tanda <code>:</code></li> <li>Kondisi diletakkan di dalam kurung diikuti dengan tanda <code>?</code> yang memisahkan dengan nilai.</li> <li>Formatnya <code>? ... : ...</code></li> </ul>"},{"location":"02/#array","title":"Array","text":"<p>Array merupakan variabel khusus yang dapat menyimpan nilai lebih dari satu.</p> <p>Beberapa jenis array: - Array Numerik - Array Asosiatif - Array 1 dimensi - Array 2 dimensi/ multi-dimensi</p> <p>Contoh:</p> <pre><code>&lt;?php\n// Array Numerik\n$hari = [\n    \"Senin\",\n    \"Selasa\",\n    \"Rabu\",\n    \"Kamis\",\n    \"Jum'at\",\n    \"Sabtu\",\n    \"Ahad\"\n];\nvar_dump($hari);\n\n// Array Asosiatif\n$siswa = [\n    \"nama\" =&gt; \"Joko Santoso\",\n    \"kelas\" =&gt; 11,\n    \"jurusan\" =&gt; \"PPLG\"\n];\nvar_dump($siswa);\n\n// Array 2 dimensi/ multi-dimensi\n$pegawai = [\n    \"nama\" =&gt; \"Rudi Hermanto\",\n    \"alamat\" =&gt; [\n        \"desa\" =&gt; \"Rejosari\",\n        \"kec\" =&gt; \"Kebonsari\",\n        \"kab\" =&gt; \"Madiun\"\n    ]\n];\nvar_dump($pegawai);\n?&gt;\n</code></pre>"},{"location":"02/#statement-control","title":"Statement Control","text":"<ul> <li>Statement control akan mengatur bagaimana data akan ditampilkan sesuai dengan kondisi tertentu</li> <li>Statement control menjadi kunci dari logika program</li> <li>Kesalahan dalam penggunaan statement control mungkin tidak menampilkan pesan error, tetapi aplikasi tidak berjalan sesuai semestinya.</li> </ul>"},{"location":"02/#percabangan-if","title":"Percabangan <code>IF</code>","text":"<p>Statement control ini digunakan untuk menjalankan suatu program tertentu jika sebuah sayrat kondisi terpenuhi. Formatnya adalah...</p> <pre><code>if (kondisi) statement;\n</code></pre> <p>Contoh:</p> <pre><code>&lt;?php\n$login = true;\nif($login) echo \"Selamat Datang\";\n?&gt;\n</code></pre> <p>Format di atas berlaku jika statement-nya hanya satu baris. Jika lebih dari satu baris, maka statement-nya menjadi:</p> <p><pre><code>if (kondisi){\n    statement1;\n    statement2;\n    // dan seterusnya...\n}\n</code></pre> Contoh:</p> <pre><code>&lt;?php\n$nama = \"Joko\";\n$nilai = 80;\n\nif($nilai &gt;= 80){\n    echo \"Selamat $nama,\";\n    echo \"Anda dinyatakan lulus..!\";\n}\n\nif($nilai &lt; 80){\n    echo \"Maaf $nama,\";\n    echo \"Anda dinyatakan belum lulus..!\";\n}\n?&gt;\n</code></pre> <p>Testing</p> <p>Sekarang coba ubah nilai 80 menjadi 70 dan jalankan skripnya. Apa hasilnya?</p>"},{"location":"02/#percabangan-if-else","title":"Percabangan <code>IF-ELSE</code>","text":"<p>Statement control ini digunakan menjalankan program tertentu jika sebuah kondisi terpenuhi, sekaligus menyediakan alternatif lain jika kondisi tidak terpenuhi. Format penulisannya adalah</p> <pre><code>&lt;?php\nif(kondisi){\n    // statement jika benar\n    statement1;\n    statement2;\n}else{\n    // statement jika salah\n    statement1;\n    statement2;\n}\n?&gt;\n</code></pre> <p>Format di atas digunakan jika statement-nya lebihd dari satu, namun jika statement-nya hanya satu, bisa menggunaka format berikut.</p> <pre><code>&lt;?php\nif(kondisi) //statement jika benar;\nelse //statement jika salah;\n?&gt;\n</code></pre> <p>Mari kita buat contohnya.</p> <pre><code>&lt;?php\n// statement 1 baris\n$nilai = 80;\nif($nilai&gt;=80) echo \"Anda lulus\";\nelse echo \"Maaf, anda belum lulus\";\n\n// statement 2 baris\n$nilai = 70;\nif($nilai &gt;= 80){\n    echo \"Selamat, Anda lulus\";\n}else{\n    echo \"Maaf, Anda belum lulus\";\n}\n?&gt;\n</code></pre>"},{"location":"02/#percabangan-if-elseif-else","title":"Percabangan <code>IF-ELSEIF-ELSE</code>","text":"<ul> <li>Statement control ini digunakan untuk mengecek kondisi berikutnya ketika kondisi pertama tidak terpenuhi.</li> <li>Jika semua kondisi tidak terpenuhi, maka dijalankan statement setelah <code>else</code>.</li> </ul> <p>Format sintakasnya</p> <pre><code>&lt;?php\nif(kondisi1){\n    // statement jika kondisi 1 benar\n}elseif(kondisi2){\n    // statement jika kondisi 2 benar\n}else{\n    // statement jika semua kondisi salah\n}\n?&gt;\n</code></pre> <p>MARKICOB (Mari kita coba...\ud83d\ude0a)</p> <pre><code>&lt;?php\n$nilai = 85;\n\nif($nilai&lt;60){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : E\";  \n}elseif($nilai&lt;70){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : D\";\n}elseif($nilai&lt;80){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : C\";\n}elseif($nilai&lt;90){\n    echo \"Nilai : $nilai\\n\";\n    echo \"Grade : B\";\n}elseif($nilai&lt;=100){\n    echo \"Nilai : A\";\n}else{\n    echo \"Maaf nilai tidak sah\";\n}\n?&gt;\n</code></pre> <p>Eksperimen</p> <p>Sekarang agar lebih interaktif, coba tambahkan fungsi php untuk mengambil input user, yaitu dengan mengganti <code>$nilai = 80;</code> menjadi <pre><code>&lt;?php\necho \"Masukkan nilai : \";\n$nilai = fgets(STDIN);\n?&gt;\n</code></pre></p>"},{"location":"02/#percabangan-switch","title":"Percabangan <code>SWITCH</code>","text":"<ul> <li>Statement control ini digunakan untuk menjalankan program pada setiap kemungkinan nilai dari sebuah  variabel.</li> <li>Ini fungsinya hampir sama dengan <code>IF</code>, namun untuk penggunaan yang lebih sederhana.</li> </ul> <p>Formatnya adalah</p> <pre><code>&lt;?php\nswitch($variabel){\n    case \"option1\": statement1;\n    break;\n    case \"option2\": statement2;\n    break;\n    default: statement3;\n    break;\n}\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Statement pada <code>default</code> akan dijalankan ketika semua option sebelumnya tidak terpenuhi.</li> <li>Setiap statement harus dikuti dengan <code>break;</code> untuk menghentikan proses pengecekan kepada option selanjutnya.</li> </ul> <p>Berikut contohnya</p> <pre><code>&lt;?php\n$kode = 1;\n\nswitch($kode){\n    case 1:\n        echo \"Selamat datang Admin\";\n        break;\n    case 2:\n        echo \"Selamat datang User\";\n        break;\n    case 3:\n        echo \"Selamat datang Tamu\";\n        break;\n    default:\n        echo \"Maaf, Akses ditolak..!\";\n        break;\n}\n?&gt;\n</code></pre> <p>Percobaan</p> <p>Seperti sebelumnya, agar lebih interaktif, coba buat aagr nilai <code>$kode</code> diinput langsung dari user dan sebelumnya tampilkan teks <code>Masukkan Kode Rahasia</code>.</p>"},{"location":"02/#perulangan-while","title":"Perulangan <code>WHILE</code>","text":"<p>While digunakan untuk menjalankan program secara berulang-ulang selama kondisi masih terpenuhi. Format penulisannya adalah</p> <pre><code>&lt;?php\nwhile(kondisi){\n    statement;\n}\n?&gt;\n</code></pre> <p>Mari kita buat contohnya</p> <pre><code>&lt;?php\n$no = 1;\nwhile($no &lt;= 10){\n    echo \"Antrian ke-$no \\n\";\n    $no++;\n}\n?&gt;\n</code></pre> <p>Peringatan</p> <ul> <li>Hati-hati dalam membuat perulangan, baik while atau yang lain, pastikan kamu membuat counter dan batas perulangannya, karena kalau tidak, bisa saja perulangan kamu akan terus dilakukan sampai memori komputer penuh yang akhirnya membuat komputer kamu mati.</li> <li>Dalam contoh di atas, betasan perulangannya adalah <code>$no &lt;=10</code> dan penambah counter <code>$no++</code>.</li> <li>Kalau program dijalankan dengan terminal/ command promt, cara menghentikannya adalah dengan menekan tombol CTRL + C, tetapi jika perulangan dijalankan di sisi server menggunakan browser, bisa-bisa servernya yang terjadi memory overflow dan mati.</li> </ul> <p>Percobaan</p> <ul> <li>Sekarang coba buat sebuah perkalian berulang seperti dulu ketika kamu masih di bangku sekolah dasar kamu diminta untuk menghafalkan daftar perkalian!, masih ingat?</li> <li>Contoh hasilnya seperti berikut </li> </ul>"},{"location":"02/#perulangan-do-while","title":"Perulangan <code>DO-WHILE</code>","text":"<ul> <li>Hampir sama seperti wbile, statement control ini digunakan untuk menjalankan program secara berulang-ulang selama kondisi terpenuhi.</li> <li>Bedanya, kalau do-while, statement-nya dijalankan terlebih dahulu, tanpa harus mengecek kondisinya terlebih dahulu.</li> <li>Hal ini memungkinkan perulangan do-while melakukan minimal 1 kali, walaupun kondisinya tidak terpenuhi.</li> </ul> <p>Format sintaksnya adalah</p> <pre><code>&lt;?php\ndo{\n    statement;\n}while(kondisi);\n?&gt;\n</code></pre> <p>Berikut contohnya</p> <pre><code>&lt;?php\n$angka = 100;\ndo{\n    echo \"Hitungan ke $angka\\n\";\n    $angka++;\n}while($angka&lt;=10);\n?&gt;\n</code></pre> <p>Perulangan di atas dirasa agak aneh, padahal kan perulangannya, harusnya dilakukan ketika variabel <code>$angka</code> bernilai lebih kecil atau sama dengan 10, namun begitulah cara kerja perulangan do-while.</p>"},{"location":"02/#perulangan-for","title":"Perulangan <code>FOR</code>","text":"<ul> <li>Secara prinsip, statement control ini sama seperti perulangan while dan do-while.</li> <li>Namun, saat menggunakan perulangan for, kita langsung menentukan batas awal dan akhir perulangannya.</li> <li>Formatnya sebagai berikut.</li> </ul> <pre><code>&lt;?php\nfor(init_statement ; kondisi ; post_statement){\n    // blok perulangan\n}\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Init statement akan dieksekusi hanya sekali di awal sebelum perulangan</li> <li>Kondisi akan dilakukan pengecekan dalam setiap perulangan, jika true perulangan akan dilakukan, jika false perulangan akan berhenti</li> <li>Post statement akan dieksekusi setiap kali diakhir perulangan</li> <li>Init statement, Kondisi dan Post Statement tidak wajib diisi, jika Kondisi tidak diisi, berarti kondisi selalu bernilai true</li> </ul> <p>Contoh-1 <pre><code>&lt;?php\n// Perulangan for tanpa henti\nfor(;;){\n    echo \"Saya berjanji tidak akan membolos lagi\\n\\n\";\n}\n?&gt;\n</code></pre></p> <p>Contoh-2 <pre><code>&lt;?php\n// Perulangan for dengan kondisi\n$counter = 1;\nfor(;$counter&lt;=10;){\n    echo \"Antrian ke-$counter\\n\";\n    $counter++;\n}\n?&gt;\n</code></pre> Contoh-3 <pre><code>&lt;?php\n// Perulangan for dengan init statement\nfor($counter=11; $counter&lt;=25;){\n    echo \"Antrian ke : $counter\\n\";\n    $counter++;\n}\n?&gt;\n</code></pre></p> <p>Contoh-4 <pre><code>&lt;?php\n// Perulangan for dengan post-statement\nfor($i=1; $i&lt;=100; $i++){\n    echo \"Antrian Sembako ke-$i\\n\";\n}\n?&gt;\n</code></pre></p>"},{"location":"02/#perulangan-foreach","title":"Perulangan <code>FOREACH</code>","text":"<p>Statement control ini digunakan khusus untuk melakukan perulangan pada data array. Format penulisannya</p> <pre><code>&lt;?php\nforeach($variabel as $alias){\n    statement;\n}\n?&gt;\n</code></pre> <p>Jika jenis array-nya array asosiatif, maka formatnya</p> <pre><code>&lt;?php\nforeach($variabel as $key =&gt; $value){\n    statement;\n}\n?&gt;\n</code></pre> <p>Contoh-1 <pre><code>&lt;?php\n// Foreach array numerik\n$buah = [\"Jeruk\",\"Mangga\",\"Apel\"];\necho \"Es \";\nforeach($buah as $b){\n    echo \"$b, \";\n}\necho \"Sori nggak level..!\ud83d\ude0a\";\n?&gt;\n</code></pre></p> <p>Jalankan dan baca dengan intonasi, xixixi \ud83e\udd2d</p> <p>Contoh-2 <pre><code>&lt;?php\n// Foreach dengan array asosiatif\n$siswa=[\n    \"nama\" =&gt; \"Dita Leni Ravia\",\n    \"kelas\" =&gt; 11,\n    \"jurusan\" =&gt; \"PPLG\"\n];\n\nforeach($siswa as $key =&gt; $value){\n    echo \"$key : $value \\n\";\n}\n?&gt;\n</code></pre></p> <p>Tantangan</p> <ul> <li>Sekarang coba buat array 2 dimensi seperti berlikut, amati dengan baik, lalu gunakan perulangan foreach untuk menampilkan seluruh datanya. Clue-nya adalah <code>foreach bersarang</code>.     <pre><code>&lt;?php\n// Foreach dengan array 2 dimensi\n$siswa=[\n    [\n        \"nis\" =&gt; 881,\n        \"nama\" =&gt; \"Roro Jonggrang\",\n        \"nilai\" =&gt; 95\n    ],\n    [\n        \"nis\" =&gt; 882,\n        \"nama\" =&gt; \"Roro Kidul\",\n        \"nilai\" =&gt; 100\n    ],\n    [\n        \"nis\" =&gt; 883,\n        \"nama\" =&gt; \"Joko Tingkir\",\n        \"nilai\" =&gt; 90\n    ]\n    ];\n?&gt;\n</code></pre></li> </ul> Buka Jawaban <pre><code>&lt;?php\n// Foreach dengan array 2 dimensi\n$siswa=[\n    [\n        \"nis\" =&gt; 881,\n        \"nama\" =&gt; \"Roro Jonggrang\",\n        \"nilai\" =&gt; 95\n    ],\n    [\n        \"nis\" =&gt; 882,\n        \"nama\" =&gt; \"Roro Kidul\",\n        \"nilai\" =&gt; 100\n    ],\n    [\n        \"nis\" =&gt; 883,\n        \"nama\" =&gt; \"Joko Tingkir\",\n        \"nilai\" =&gt; 90\n    ]\n    ];\n\nforeach($siswa as $tokoh){\n    foreach($tokoh as $data =&gt; $nilai){\n        echo \"$data : $nilai\\n\";\n    }\n}\n?&gt;\n</code></pre>"},{"location":"02/#modularitas","title":"Modularitas","text":"<ul> <li>Saat membuat aplikasi, ada baiknya tidak dibuat dalam satu file Lebih baik dipisah ke beberapa file agar kode program tidak terlalu bertumpuk di satu file.</li> <li>PHP memiliki function require dan include yang bisa kita gunakan untuk mengambil file php lain.</li> <li>Lantas apa bedanya require dan include?</li> <li>Pada require, jika file yang kita ambil tidak ada, maka akan terjadi error dan program terhenti.</li> <li>Pada include, jika file yang kita ambil tidak ada, maka hanya akan memberi peringatan, namun program akan tetap dilanjutkan.</li> </ul> <p>Sebagai contoh, kita buat file pertama yaitu modul.php</p> <pre><code>&lt;?php\necho \"Halo.., Ini pesan dari file modul.php\"\n?&gt;\n</code></pre> <p>Lalu kita buat file kedua, yaitu include.php</p> <pre><code>&lt;?php\necho \"Ini pesan dari file include.php \\n\";\ninclude \"modul.php\";\n?&gt;\n</code></pre> <p>Sekarang jalankan file include.php, maka perintah echo dari file <code>include.php</code> dan <code>modul.php</code> akan ditampilkan semuanya.</p> <p>Satu lagi, coba buat file require.php sebagai berikut.</p> <pre><code>&lt;?php\nrequire \"fungsi.php\";\necho \"ini pesan dari file require.php \\n\";\n?&gt;\n</code></pre> <p>Jalankan skrip php di atas, dan apa hasilnya? \ud83e\udd14</p> Benar <p>Muncul pesan Error... karena file yang dipanggil menggunakan <code>require</code> tidak ada, yaitu <code>fungsi.php</code>.</p> <p>Catatan Tambahan</p> <ul> <li>Function <code>require</code> dan <code>include</code> akan selalu mengambil file yang kita inginkan.</li> <li>Jika kita beberapa kali menggunakan <code>require</code> dan <code>include</code> file yang sama, maka file tersebut akan berkali-kali pula kita ambil.</li> <li>Hal ini akan menjadi masalah jika misal dalam file yang kita ambil terdapat definisi function , sehingga jika diambil berkali-kali akan menyebabkan error redeclare function.</li> <li>Untungnya di PHP terdapat function <code>require_once</code> dan <code>include_once</code>, function ini bisa mendeteksi jika kita sebelumnya pernah mengambil file yang sama, maka tidak akan diambil lagi</li> </ul>"},{"location":"03/","title":"Function","text":"<ul> <li>Function digunakan untuk membuat blok program yang sering digunakan di dalam penulisan skrip PHP.</li> <li>Function tidak otomatis dijalankan ketika skrip dijalankan.</li> <li>Function hanya dieksekusi jika dipanggil.</li> <li>Pemanggilan function dapat dilakukan berkali-kali setiap kali dibutuhkan.</li> <li>Function biasanya digunakan untuk meyingkat skrip yang sering digunakan, terutama yang skrip-nya panjang.</li> <li>Secara umum, setidaknya ada 2 jenis function, yaitu<ol> <li>User-defined function, fungsi yang dibuat sendiri oleh user.</li> <li>Built-in function, fungsi yang sudah disediakan oleh PHP.</li> </ol> </li> </ul>"},{"location":"03/#function-dasar","title":"Function Dasar","text":"<p>Untuk membuat function format dasarnya sebagai berikut.</p> <pre><code>&lt;?php\nfunction nama_function(argumen){\n    // blok program\n}\n?&gt;\n</code></pre> <p>Sekarang kita buat contohnya.</p> <p><pre><code>&lt;?php\n// membuat function\nfunction salam(){\n    echo \"Assalamu'alaikum..,\";\n}\n\n// memanggil function\nsalam();\nsalam();\n?&gt;\n</code></pre> Coba jalankan skrip di atas, maka akan muncul pesan \"Assalamu'alaikum..,\" sebanyak 2 kali, karena kita memanggilnya 2 kali.</p>"},{"location":"03/#function-dengan-argumen","title":"Function dengan Argumen","text":"<p>Ada kalanya kita membuat function untuk memproses data tertentu, sehingga kita perlu membuat function yang bisa menerima argumen. Berikut contohnya.</p> <pre><code>&lt;?php\n// membuat function\nfunction sapa($nama){\n    echo \"Hai $nama, Apa kabar?\\n\";\n}\n\n// memanggil function\nsapa(\"Joko\");\nsapa(\"Dita\");\n?&gt;\n</code></pre> <ul> <li>Pada skrip di atas, function memiliki 1 argumen, yaitu $nama.</li> <li>Kita bisa loh.., membuat argumen lebih dari 1, yaitu dengan memisahkan argumen dengan tanda koma <code>.</code> .</li> <li>Variabel yang kita definisikan di dalam function disebut sebagai parameter, sedangkan nilai yang kita masukkan saat pemanggilan fungsi disebut sebagai argumen.</li> <li>Saat kita mencoba memanggil fungsi yang memiliki parameter, namun kita lupa memasukkan argumennya, tentu akan terjadi error.</li> <li>Untuk mengatasi hal tersebut kita bisa membuat default argument, sehingga jika kita lupa tidak memasukkan argumen saat pemanggilan function, tidak akan terjadi error dan function akan dijalankan dengan normal. Contoh</li> </ul> <pre><code>&lt;?php\n// Membuat function\nfunction sapa($waktu=\"Pagi\"){\n    echo \"Selamat $waktu \\n\";\n}\n\n// Memanggil function dengan argumen\nsapa(\"Siang\");\n// Memanggil function tanpa argumen\nsapa();\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Mungkin suatu saat kita membuat function yang memiliki 2 parameter atau lebih dan ada yang memiliki default argumen maupun tidak.</li> <li>Untuk membuat function tersebut, kita tidak boleh asal dala meletakkan urutan parameternya, karena kalau tidak, PHP akan salah paham dalam memproses nilai argumennya.</li> <li>Dalam kasus di atas, parameter yang tidak memiliki default argument harus diletakkan di depan, sedangkan parameter yang memiliki default argument harus diletakkan di urutan belakang.</li> </ul> <p>Contoh-1 <pre><code>&lt;?php\n// function dengan urutan default argumen salah\nfunction sapa($nama=\"Kamu\", $waktu){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Dita\",\"Pagi\");\n?&gt;\n</code></pre></p> <ul> <li>Mungkin skrip di atas jika dijalankan akan berhasil, namun tetap menghasilkan error.</li> <li>Bagaimana jika kita ingin menjalankan skripnya tapi anggaplah saya hanya ingin mengisi argumen <code>$waktu</code> nya saja, karena argumen <code>$nama</code> memiliki default argumen, seperti contoh berikut.</li> </ul> <pre><code>&lt;?php\n// function dengan urutan default argumen salah\nfunction sapa($nama=\"Kamu\", $waktu){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Pagi\");\n?&gt;\n</code></pre> <p>Tentu saja Error</p> <p>Deprecated: Optional parameter $nama declared before required parameter $waktu is implicitly treated as a required parameter in C:\\Users\\ASUS\\Documents\\GitHub\\modul-belajar-php-dasar\\sourcecode\\function\\function4.php on line 3</p> <p>Contoh-2</p> <p>Maka, yang benar harusnya seperti ini.</p> <p><pre><code>&lt;?php\n// function dengan urutan default argumen yang benar\nfunction sapa($waktu, $nama=\"Kamu\"){\n    echo \"Hai $nama, Selamat $waktu \\n\";\n}\n// memanggi function\nsapa(\"Pagi\");\n?&gt;\n</code></pre> Walaupun, saya tidak memasukan argumen <code>$nama</code>, kode tetap akan dijalankan tanpa error.</p> <p>Tantangan</p> <ul> <li> <p>Sebagai bentuk latihan, coba sekarang buatlah sebuah fungsi perkalian dengan nama <code>perkalian()</code>, yang jika saya memanggil dengan cara <code>perkalian(2)</code> maka menghasilkan seperti berikut. <code>(Clue-nya gabungkan perulangan ke dalam function)</code>. \ud83e\udd14</p> <p>1 x 2 = 2</p> <p>2 x 2 = 4</p> <p>3 x 2 = 6</p> <p>4 x 2 = 8</p> <p>5 x 2 = 10</p> <p>6 x 2 = 12</p> <p>7 x 2 = 14</p> <p>8 x 2 = 16</p> <p>9 x 2 = 18</p> <p>10 x 2 = 20</p> </li> </ul> Jawaban <pre><code>&lt;?php\n// Membuat fungsi perkalian\nfunction perkalian($angka){\n    for($i=1; $i&lt;=10; $i++){\n        echo \"$i x $angka = \" . $i*$angka . \"\\n\";\n    }\n}\n// memanggil fungsi perkalian\nperkalian(2);\n?&gt;\n</code></pre>"},{"location":"03/#function-dengan-nilai-kembalian","title":"Function dengan Nilai Kembalian","text":"<ul> <li>Pada contoh-contoh sebelumnya, kita membuat function yang langsung menampilkan hasilnya di layar dengan perintah <code>echo</code>.</li> <li>Namun, ada kalanya kita membuat function lalu hasilnya akan diproses lagi oleh function yang lain.</li> <li>Dalam kasus tersebut kita perlu menambahkan perintah <code>return</code> yang akan memberikan nilai kembalian.</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\nfunction luas_persegi($panjang, $lebar){\n    $luas = $panjang * $lebar;\n    return $luas;\n}\n\necho \"Luas ruang kelas adalah \" . luas_persegi(3,4) . \" m\";\n?&gt;\n</code></pre> <p>Contoh-2</p> <p><pre><code>&lt;?php\nfunction nama_panggilan($nama){\n    return substr($nama,0,5);\n}\n\n$namanya = nama_panggilan(\"joko santoso\");\necho ucfirst($namanya);\n?&gt;\n</code></pre> S</p> <p>Keterangan</p> <ul> <li><code>substr</code> adalah fungsi bawaan php untuk mengambil beberapa karakter string dari kiri, <code>0</code> maksudnya dimulai dari karakter ke 0, dan <code>5</code> maksudnya ambil sebanyak 5 karakter.</li> <li><code>ucfirst</code> juga fungsi bawaan php yang berfungsi untuk membuat teks/ string menjadi kapital pada huruf pertamanya.</li> </ul>"},{"location":"03/#variasi-function-yang-lain","title":"Variasi Function yang lain","text":"<ul> <li>Selain function standar di atas, sebenarnya di PHP kita bisa membuat function dengan penulisan yang sedikit berbeda, lebih rumit, atau bahkan lebih simpel dari format dasarnya.</li> <li>Hal ini tentunya disesuaikan dengan kebutuhan program atau aplikasi yang akan kita buat.</li> </ul>"},{"location":"03/#anonymous-function","title":"Anonymous Function","text":"<ul> <li>Anonymous function adalah function tanpa nama, di PHP disebut juga dengan Closure.</li> <li>Anonymous function biasanya digunakan sebagai argument atau sebagai value di variable.</li> <li>Anonymous function membuat kita bisa mengirim function sebagai argument di function lainnya.</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\n// Anonymous Function\n$halo = function(string $nama){\n    echo \"Halo $nama\".PHP_EOL;\n};\n\n$halo(\"Eko\");\n$halo(\"Joko\");\n?&gt;\n</code></pre> <p>Catatan</p> <ul> <li>Perhatikan, bahwasanya saat membuat function, kita tidak membuat nama function-nya, namun langsung membuat bagian parameternya.</li> <li>Function tersebut langsung dimasukkan ke dalam variable <code>$halo</code>.</li> <li>Cara pemanggilan function tinggal menyebut nama variable yang berisi function tersebut, dalam hal ini adalah <code>$halo</code>.</li> </ul> <p>Contoh-2</p> <pre><code>&lt;?php\n// Anonymous Functtion 2\nfunction siyu(string $nama, $format){\n    $namaAkhir = $format($nama);\n    echo \"See you $namaAkhir\".PHP_EOL;\n}\n\n// Memanggil function\nsiyu(\"Dita Leni Ravia\", function(string $n){\n    return strtoupper($n);\n})\n?&gt;\n</code></pre> <p>Peringatan</p> <ul> <li>Mungkin, function tersebut terlihat membingungkan untuk difahami, namun cobalah untuk membaca dan memahami maksud dari tiap baris kodenya.</li> <li><code>strtoupper()</code> adalah function bawaan PHP untuk membuat teks menjadi huruf kapital.</li> </ul> <p>Catatan</p> <ul> <li>Secara default, anonymous function tidak bisa mengakses variabel yang terdapat diluar function.</li> <li>Jika kita ingin menggunakan variable yang terdapat diluar anonymous function, kita perlu secara explicit menyebutkannya menggunakan kata kunci use lalu diikuti variable-variable yang ingin kita gunakan.</li> </ul> <p>Sekarang coba ini..!</p> <pre><code>&lt;?php\n$namaDepan = \"Anggun\";\n$namaBelakang = \"Khowatim\";\n\n$hai = function(){\n    echo \"Hai $namaDepan $namaBelakang\".PHP_EOL;\n};\n\n$hai();\n?&gt;\n</code></pre> <p>Kalau begini..?</p> <pre><code>&lt;?php\n// Akses variable di luar closure\n$namaDepan = \"Aulia\";\n$namaBelakang = \"Fatmawati\";\n\n$hai = function() use($namaDepan,$namaBelakang){\n    echo \"Hai $namaDepan $namaBelakang\".PHP_EOL;\n};\n\n$hai();\n?&gt;\n</code></pre> <p>Yeay.. Berhasil \ud83d\ude01</p>"},{"location":"03/#arrow-function","title":"Arrow Function","text":"<p>Satu lagi kita bahas tentang variasi function di dalam PHP, walaupun sebenarnya masih banyak variasi function yang lain \ud83d\ude05.</p> <ul> <li>Arrow function diperkenalkan di PHP 7.4 sebagai alternative anonymous function yang lebih sederhana pembuatannya.</li> <li>Secara garis besar, sebenarnya arrow function dan anonymous function adalah dua hal yang sama.</li> <li>Hal yang membedakan di arrow function adalah, secara otomatis variable diluar closure bisa digunakan, tidak seperti di anonymous function yang harus disebutkan secara manual menggunakan kata kunci use.</li> <li>Pembuatan arrow function tidak menggunakan kata kunci function, melainkan fn.</li> <li>Arrow function di khususnya untuk pembuatan function yang sederhana</li> </ul> <p>Contoh-1</p> <pre><code>&lt;?php\n// Arrow Function\n$a = 5;\n$b = 4;\n\n$kali = fn()=&gt;$a*$b;\n\necho $kali();\n?&gt;\n</code></pre> <p>Contoh-2</p> <pre><code>&lt;?php\n// Arrow Function-2\n$n1=\"Faruq\";\n$n2=\"Arzaky\";\n\n$goodbye = fn()=&gt;\"Goodbye $n1 $n2\".PHP_EOL;\n\necho $goodbye();\n?&gt;\n</code></pre> <p>Penutup</p> <ul> <li>Terlihat jelas bahwa pembuatan function dengan arrow function sangat sederhana, namun kita tidak bisa membuat function ini untuk setiap program yang kita buat, semua tergantung kebutuhan sistemnya.</li> <li>Kita cukupkan pembahasan tentang function kali ini, jika anda masih tertarik ingin tahu lebih tentang function, silahkan coba cari sendiri materinya dengan keyword Callback Function dan Recrusive Function. \ud83d\ude0a</li> </ul>"},{"location":"03/#function-untuk-operasi-string","title":"Function untuk Operasi String","text":"<p>Untuk memanipulasi string, PHP sudah menyediakan function bawaan yang bisa langsung kita gunakan. Di antaranya sebagai berikut.</p> Function Keterangan <code>addslashes(string)</code> Memberikan tanda <code>\\</code> pada karakter khusus seperti petik ganda <code>\"</code>, petik tunggal <code>'</code> dan sebagainya. <code>chr(ascii)</code> Menghasilkan karakter dari sebuah kode ASCII <code>explode(pemisah, string, batas)</code> Mengkonversi string menjadi array. Fungsi ini sering dipakai <code>htmlentities(string, flags, character_set, double_encode)</code> Mengkonversi karakter ke kode HTML <code>htmlspecialchars(string,flags,character_set,double_encode)</code> Mengkonversi karakter tertentu ke kode HTML <code>implode(pemisah, array)</code> Menghasilkan string dari suatu array. Kebalikan dari <code>implode()</code>, ini juga sering dipakai. <code>join(pemisah, array)</code> Menghasilkan string dari suatu array. Alias dari <code>implode()</code>. <code>lcfirst(string)</code> Lowercase First, mengkonversi string pertama menjadi huruf kecil. <code>ltrim(string, charlist)</code> Menghilangkan spasi atau karakter tertentu di sebelah kiri string. <code>md5(string, raw)</code> Enkripsi dengan MD5 dari sebuah string. RAW menentukan format output binary atau heksadesimal, diisi <code>true</code> atau <code>false</code>. <code>nl2br(string,xhtml)</code> Menyisipkan tag <code>&lt;br&gt;</code> pada setiap ganti baris dari sebuah string. XHTML diisi <code>true</code> atau <code>false</code>. <code>number_format(number, desimal, pemisah desimal, pemisah ribuan)</code> Memformat angka menjadi ribuan. <code>printf(format, arg1, arg2, arg3, ...)</code> Menghasilkan string dengan format tertentu. <code>rtrim(string, charlist)</code> Menghilangkan spasi atau karakter tertentu pada sebelah kanan string. <code>str_ireplace(dicari, pengganti, string, jumlah)</code> Mengganti beberapa karakter pada sebuah string tanpa membedakan besar kecilnya huruf. <code>str_replace(dicari, pengganti, string, jumlah)</code> Mengganti beberapa karakter pada sebuah string dengan membedakan besar kecilnya huruf. <code>str_shuffle(string)</code> Mengacak karakter pada sebuah string. <code>str_word_count(string, return, char)</code> Menghasilkan jumlah karakter dari sebuah string <code>stripslashes(string)</code> Mengembalikan perintah <code>addslashesh()</code> <code>strlen(string)</code> Menghasilkan panjang sebuah string. <code>strpos(string, dicari, mulai)</code> Menghasilkan posisi pertama dari sebuah string pada suatu string. Versi case-insensitice menggunakan <code>strripos()</code>. <code>strrpos(string, dicari, mulai)</code> Menghasilkan posisi terakhir sebuah string pada suatu string. Versi case-insensitive menggunakan <code>strripos()</code>. <code>strtolower(string)</code> Mengkonversi string ke huruf kecil semua. <code>strtoupper(string)</code> Mengkonversi string ke huruf besar semua. <code>substr(string, mulai, panjang)</code> Menghasilkan bagian dari sebuah string. <code>trinm(string, charlist)</code> Menghilangkan spasi atau karakter lain di awal maupun akhir string. <code>ucfirst(string)</code> Mengubah hurug pertama string menjadi huruf kapital. <code>ucwords(string)</code> Mengubah huruf pertama setiap kata dari sebuah string menjadi huruf kapital. <p>Untuk lebih memahami penggunaan dari fungsi-fungsi di atas, mari kita coba beberapa.</p> <pre><code>&lt;?php\n$teks = \"Saya senang belajar PHP\";\necho \"Teks asli '$teks'\".PHP_EOL;\n\necho \"substr() : \" . substr($teks,0,11) . PHP_EOL;\necho \"susbtr() : \" . substr($teks,12) . PHP_EOL;\necho \"strtoupper() : \" . strtoupper($teks) . PHP_EOL;\necho \"ucwords() : \" . ucwords($teks) . PHP_EOL;\necho \"str_replace() : \" . str_replace(\"senang\",\"suka\",$teks) . PHP_EOL;\necho \"strops() : \" . strpos($teks,\"P\") . PHP_EOL;\n\n$kata = explode(' ',$teks);\necho \"explode() : \" . $kata[1];\n\n?&gt;\n</code></pre> <p>Referensi</p> <p>Jika kamu tertarik mempeljari string function yang lain, bisa kunjungi \ud83c\udf0f link berikut.</p>"},{"location":"03/#function-untuk-operasi-tanggal","title":"Function untuk Operasi Tanggal","text":"<p>PHP juga menyediakan functio bawaan untuk memproses data tanggal, sebagaimana berikut.</p>"},{"location":"03/#function-date","title":"Function <code>date()</code>","text":"<ul> <li>Function ini digunakan untuk mencetak tanggal dengan format tertentu.</li> <li>Format tanggal ditulis di dalam kurung.</li> <li>Beberapa huruf yang dapat digunakan untuk menulis format tanggal sebagai berikut.</li> </ul> <p>Time</p> Huruf Keterangan a am atau pm A AM atau PM g Jam tanpa 0 di depan, bernilai antara 1-12 G Jam tanpa 0 di depan, bernilai antara 0-23 h Jam dengan 0 di depan, bernilai antara 1-12 H Jam dengan 0 di depan, bernilai antara 00-23 i Menit dengan 0 di depan, bernilai antara 00-59 s detik dengan 0 di depan, bernilai antara 00-59 <p>Day</p> Huruf Keterangan d Tanggal dengan 0 di depan, bernilai antara 01-31 j Tanggal tanpa 0 di depan, bernilai antara 1-31 D Hari dalam mingguan(singkatan), bernilai antara Sun - Sat I Hari dalam mingguan, bernilai antara Sunday - Saturday w Hari dalam mingguan tanpa 0 di depan, bernilai antara 0 - 6 w Hari dalam tahunan tanpa 0 di depan, bernilai antara 0 - 365 <p>Month</p> Huruf Keterangan m Bulan dengan 0 di depan, bernilai antara 01 - 12 n Bulan tanpa 0 di depan, bernilai antara 1 - 12 M Singkatan dari bulan, bernilai antara Jan - Dec F Nama bulan lengkap, bernilai antara January - December t Jumlah hari dalam sebulan, bernilai antara 28 -  31 <p>Year</p> Huruf Keterangan L 1 jika melompati tahun, dan 0 jika tidak Y Tahun dengan 4 digit y Tahun dengan 2 digit <p>Agar lebih memahami penggunaan fungsi-fungsi di atas, mari kita coba beberapa, yang sering digunakan.</p> <pre><code>&lt;?php\n// Function date\necho date('Y/m/d') . PHP_EOL;\necho date('d-m-Y H:i:s a') . PHP_EOL;\necho date('d F Y');\n?&gt;\n</code></pre>"},{"location":"03/#function-mktime","title":"Function <code>mktime()</code>","text":"<p>Function ini digunakan untuk membuat timestamp dengan format sintaks sebagai berikut.     <code>mktime(hour, minute, second, month, day, year);</code></p> <p>Contoh</p> <pre><code>&lt;?php\n// Function mktime()\n$sekarang = mktime(12, 13, 40, date('m'), date('d'), date('Y'));\necho \"Sekarang tanggal \" . date('d F Y', $sekarang);\necho \"\\n\";\n\n$bulanlalu = mktime(0, 0, 0, date('m')-1, date('d'), date('Y'));\necho \"Satu bulan yang lalu adalah tanggal \" . date('d F Y', $bulanlalu);\necho \"\\n\";\n\n$lusa = mktime(0, 0, 0, date('m'), date('d')+2, date('Y'));\necho \"Lusa adalah tanggal \" . date('d F Y', $lusa);\necho \"\\n\";\n\n$tahun = mktime(0, 0, 0, date('m'), date('d'), date('Y')-2);\necho \"Dua tahun yang lalu adalah tanggal \" . date('d F Y', $tahun);\n\n?&gt;\n</code></pre> <p>Informasi</p> <p>Selain 2 function yang paling sering digunakan di atas, beberapa function yang berkenaan dengan penggunaan tanggal yaitu <code>date_default_timezone_set()</code> untuk menentukan timezone dan <code>strtotime()</code> untuk mengubah string menjadi format tanggal atau waktu. \ud83d\ude0a</p>"},{"location":"03/#function-untuk-operasi-matematika","title":"Function untuk Operasi Matematika","text":"<p>Untuk operasi matematika, banyak sekali function bawaan PHP yang bisa langsung kita gunakan, sebagai berikut.</p>"},{"location":"03/#function-untuk-penanganan-file","title":"Function untuk Penanganan File","text":"<p>PHP dapat digunakan untuk memanipulasi direktori maupun file. Di antara function-function nya adalahs sebagai berikut.</p>"},{"location":"04/","title":"Variabel Superglobal","text":""},{"location":"04/#variabel-superglobal","title":"Variabel Superglobal","text":""},{"location":"04/#variabel-global","title":"Variabel $GLOBAL","text":""},{"location":"04/#variabel-_server","title":"Variabel $_SERVER","text":""},{"location":"05/","title":"Session","text":""},{"location":"05/#session","title":"Session","text":""},{"location":"06/","title":"Cookie","text":""},{"location":"06/#cookie","title":"Cookie","text":""},{"location":"07/","title":"Form","text":""},{"location":"07/#penanganan-form","title":"Penanganan Form","text":""},{"location":"07/#variabel-_get","title":"Variabel $_GET","text":""},{"location":"07/#variabel-_post","title":"Variabel $_POST","text":""},{"location":"07/#variabel-_files","title":"Variabel $_FILES","text":""},{"location":"08/","title":"Database","text":""},{"location":"08/#penanganan-database","title":"Penanganan Database","text":""},{"location":"09/","title":"Praktik Aplikasi","text":""},{"location":"09/#praktik-membuat-aplikasi","title":"Praktik Membuat Aplikasi","text":""},{"location":"end/","title":"Penutup","text":"<p>Penutup</p> <p>Terima kasih telah menggunakan panduan belajar dasar-dasar bahasa pemrograman PHP ini. Saya berharap panduan ini dapat memberikan manfaat nyata dalam memahami dan menguasai dasar Bahasa Pemrograman PHP, baik untuk kebutuhan belajar, mengajar, maupun pengembangan profesional.</p> <p>Jika ada kekurangan dalam penyusunan panduan ini, saya dengan rendah hati menerima saran dan kritik membangun agar panduan ini bisa terus diperbaiki dan dikembangkan.</p> <p>Mari bersama-sama menjadikan ilmu yang kita pelajari sebagai bekal untuk kebaikan dan kemajuan. Saya percaya, dengan berbagi ilmu, kita tidak hanya membantu sesama, tetapi juga mendekatkan diri pada keberkahan ilmu itu sendiri.</p> <p>Selamat belajar, dan semoga sukses selalu menyertai langkah Anda!</p> <p>Hormat kami,</p> <p>Ipnu Masyaid</p> <p>Beliin Kopi  </p>"}]}